<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def clazz  = fn.deduce(entity.clazz)
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def impl   = fn.deduceName(entity.clazz, 'Impl')
    def func   = fn.deduceName(entity.clazz, 'Func')
    def mapper = fn.deduceName(entity.clazz, 'Mapper')
    def logic  = fn.deduceName(entity.clazz, 'Logic')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    def attr2   = []
    attr2.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr2.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr2.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${impl.type}.java" layer="impl" dir="." pkg="${pkg}">
<![CDATA[
import ${pkg}.data.${data.type};
import ${pkg}.data.${filter.type};
import ${basePkg}.modelo.${clazz.type};
import ${pkg}.mapper.${mapper.type};
import bo.central.result.ResultObject;
import bo.central.result.ResultSet;
import javax.ejb.EJB;
import javax.ejb.Logic;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.interceptor.Interceptors;

@Stateless
@Logic(${serv.type}.class)
@Interceptors ({ImplInterceptor.class})
@TransactionManagement(TransactionManagementType.CONTAINER)
public class ${impl.type} implements ${serv.type} {

  @EJB
  private ${logic.type} logic;
  
  public ${impl.type}(){
  }
  
  public ${impl.type}(EntityManager em){
    logic = new ${logic.type}(em);
  }

  @Override
  public ResultSet<${data.type}> filtrar${data.type}(${filter.type} filter){
        ResultSet<${clazz.type}> result = logic.filter${data.type}(filter);
        return result.mapper(${mapper.type}::mapperTo${data.type});
  }

  @Override
  public ResultObject<${data.type}> recargar${data.type}(${data.type} ${data.var}) {
        Long id = ${data.var} == null? null : ${data.var}.getId();
        ResultObject<${clazz.type}> result = logic.search${data.type}(id);
        return result.mapper(${mapper.type}::mapperTo${data.type});
  }
  
  @Override
  public ResultObject<${data.type}> registrar${data.type}(${data.type} ${data.var}){
        ${clazz.type} ${clazz.var} = ${mapper.type}.mapperTo${clazz.type}(${data.var});
        ResultObject<${clazz.type}> result = logic.create${data.type}(${clazz.var});
        return result.mapper(${mapper.type}::mapperTo${data.type});
  }
  @Override
  public ResultObject<${data.type}> actualizar${data.type}(${data.type} ${data.var}){
        ${clazz.type} ${clazz.var} = ${mapper.type}.mapperTo${clazz.type}(${data.var});
        ResultObject<${clazz.type}> result = logic.update${data.type}(${clazz.var});
        return result.mapper(${mapper.type}::mapperTo${data.type});
  }
  @Override
  public ResultObject<${data.type}> eliminar${data.type}(${data.type} ${data.var}){
        Long id = ${data.var} == null? null : ${data.var}.getId();
        ResultObject<${clazz.type}> result = logic.remove${data.type}(id);
        return result.mapper(${mapper.type}::mapperTo${data.type});
  }
}
]]></file>
    <file name="${mapper.type}.java" layer="impl:mapper" dir="." pkg="${pkg}.mapper">
<![CDATA[
import ${pkg}.data.${data.type};
import ${basePkg}.modelo.${clazz.type};

public class ${mapper.type} {
  
    public static ${data.type} mapperTo${data.type}(${clazz.type} ${clazz.var}){
        ${data.type} ${data.var} = new ${data.type}();
        <% attr.each{  %>
        ${data.var}.${it.set}(${clazz.var}.${it.get}());<% } %>
        <% attr2.each{  %>
        //${data.var}.${it.set}(${clazz.var}.${it.get}());<% } %>
        return ${data.var};
    }
  
    public static ${clazz.type} mapperTo${clazz.type}(${data.type} ${data.var}){
        ${clazz.type} ${clazz.var} = new ${clazz.type}();
        <% attr.each{  %>
        ${clazz.var}.${it.set}(${data.var}.${it.get}());<% } %>
        <% attr2.each{  %>
        //${clazz.var}.${it.set}(${data.var}.${it.get}());<% } %>
        return ${clazz.var};
    }
}
]]></file>
    <% } %>
</files>
