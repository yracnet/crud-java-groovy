<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity -> 
    def clazz  = fn.deduce(entity.clazz)
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def mapper = fn.deduceName(entity.clazz, 'Mapper')
    def logic  = fn.deduceName2(entity.clazz, 'Logic')
    def impl   = fn.deduceName(entity.clazz, 'Impl')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.version.collect{fn.deduceAttrName(it)})
    def attr2   = []
    attr2.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr2.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr2.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${impl.type}.java" layer="impl" dir="." pkg="${pkg}" skip="false"><![CDATA[
import bo.gob.bcb.Result;
import bo.gob.bcb.result.Message;
import bo.gob.bcb.result.ResultList;
import bo.gob.bcb.result.ResultVoid;
import bo.gob.bcb.result.ResultObject;
import bo.gob.bcb.result.ResultFactory;
import ${basePkg}.model.${clazz.type};
import ${pkg}.data.${data.type};
import ${pkg}.data.${filter.type};
import ${pkg}.mapper.${mapper.type};
import java.util.Date;
import javax.inject.Inject;
import javax.interceptor.Interceptors;

@Interceptors ({EJBInterceptor.class})
public class ${impl.type} implements ${serv.type} {

    @Inject
    private ${logic.type} ${logic.var};

    @Override
    public ResultVoid ping() {
        Message message = ResultFactory.createMessageSuccess("Ping Service");
        message.addCause("Date: " + new Date());
        message.addCause("This: " + this);
        message.addCause("${logic.type}: " + ${logic.var});
        return ResultFactory.createResultVoidSuccess(message);
    }

    @Override
    public ResultList<${data.type}> ${data.var}Filtrar(${filter.type} filter) {
        ResultList<${clazz.type}> result = ${logic.var}.${data.var}Query(filter);
        return result.mapper(${mapper.type}::mapperTo${data.type});
    }

    @Override
    public ResultObject<${data.type}> ${data.var}Recargar(${data.type} ${data.var}) {
        Long id = ${data.var} == null? null : ${data.var}.getId();
        ResultObject<${clazz.type}> result = ${logic.var}.${data.var}Find(id);
        return result.mapper(${mapper.type}::mapperTo${data.type});
    }

    @Override
    public ResultObject<${data.type}> ${data.var}Registrar(${data.type} ${data.var}) {
        ${clazz.type} ${clazz.var} = ${mapper.type}.mapperTo${clazz.type}(${data.var});
        ResultObject<${clazz.type}> result = ${logic.var}.${data.var}Persist(${clazz.var});
        return result.mapper(${mapper.type}::mapperTo${data.type});
    }

    @Override
    public ResultObject<${data.type}> ${data.var}Actualizar(${data.type} ${data.var}) {
        ${clazz.type} ${clazz.var} = ${mapper.type}.mapperTo${clazz.type}(${data.var});
        ResultObject<${clazz.type}> result = ${logic.var}.${data.var}Merge(${clazz.var});
        return result.mapper(${mapper.type}::mapperTo${data.type});
    }

    @Override
    public ResultVoid ${data.var}Eliminar(${data.type} ${data.var}) {
        Long id = ${data.var} == null? null : ${data.var}.getId();
        return ${logic.var}.${data.var}Remove(id);
    }
}
]]></file>
    <file name="${mapper.type}.java" layer="impl" dir="." pkg="${pkg}.mapper">
<![CDATA[
import ${pkg}.data.${data.type};
import ${basePkg}.model.${clazz.type};

public class ${mapper.type} {
  
    public static ${data.type} mapperTo${data.type}(${clazz.type} ${clazz.var}){
        ${data.type} ${data.var} = new ${data.type}();
        <% attr.each{  %>
        ${data.var}.${it.set}(${clazz.var}.${it.get}());<% } %>
        <% attr2.each{  %>
        //${data.var}.${it.set}(${clazz.var}.${it.get}());<% } %>
        return ${data.var};
    }
  
    public static ${clazz.type} mapperTo${clazz.type}(${data.type} ${data.var}){
        ${clazz.type} ${clazz.var} = new ${clazz.type}();
        <% attr.each{  %>
        ${clazz.var}.${it.set}(${data.var}.${it.get}());<% } %>
        <% attr2.each{  %>
        //${clazz.var}.${it.set}(${data.var}.${it.get}());<% } %>
        return ${clazz.var};
    }
}
]]></file>
    <% } %>
</files>
