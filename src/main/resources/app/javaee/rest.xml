<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity -> 
    def clazz  = fn.deduce(entity.clazz)
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def mapper = fn.deduceName(entity.clazz, 'Mapper')
    def local  = fn.deduceName(entity.clazz, 'Local')
    def impl   = fn.deduceName(entity.clazz, 'Impl')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    def attr2   = []
    attr2.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr2.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr2.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${rest.type}.java" layer="rest" dir="." pkg="${pkg}" skip="false"><![CDATA[
import bo.central.Result;
import bo.central.result.Message;
import bo.central.result.ResultSet;
import bo.central.result.ResultObject;
import bo.central.result.ResultVoid;
import ${basePkg}.modelo.${clazz.type};
import ${pkg}.data.${data.type};
import ${pkg}.data.${filter.type};
import ${pkg}.mapper.${mapper.type};
import java.util.Date;
import javax.ejb.EJB;
import javax.interceptor.Interceptors;

@Interceptors ({RestInterceptor.class})
public class ${rest.type} implements ${serv.type} {

    @EJB
    private ${local.type} local;

    @Override
    public ResultVoid ping() {
        ResultVoid result = ResultVoid.of();
        Message message = result.addMessage("Ping Service");
        message.addCause("This: " + this);
        message.addCause("Date: " + new Date());
        message.addCause("Local: " + local);
        return result;
    }

    @Override
    public ResultSet<${data.type}> filtrar${data.type}(${filter.type} filter) {
        ResultSet<${clazz.type}> result = local.filter${data.type}(filter);
        return result.mapper(${mapper.type}::mapperTo${data.type});
    }

    @Override
    public ResultObject<${data.type}> recargar${data.type}(${data.type} ${data.var}) {
        Long id = ${data.var} == null? null : ${data.var}.getId();
        ResultObject<${clazz.type}> result = local.search${data.type}(id);
        return result.mapper(${mapper.type}::mapperTo${data.type});
    }

    @Override
    public ResultObject<${data.type}> registrar${data.type}(${data.type} ${data.var}) {
        ${clazz.type} ${clazz.var} = ${mapper.type}.mapperTo${clazz.type}(${data.var});
        ResultObject<${clazz.type}> result = local.create${data.type}(${clazz.var});
        return result.mapper(${mapper.type}::mapperTo${data.type});
    }

    @Override
    public ResultObject<${data.type}> actualizar${data.type}(${data.type} ${data.var}) {
        ${clazz.type} ${clazz.var} = ${mapper.type}.mapperTo${clazz.type}(${data.var});
        ResultObject<${clazz.type}> result = local.update${data.type}(${clazz.var});
        return result.mapper(${mapper.type}::mapperTo${data.type});
    }

    @Override
    public ResultObject<${data.type}> eliminar${data.type}(${data.type} ${data.var}) {
        Long id = ${data.var} == null? null : ${data.var}.getId();
        ResultObject<${clazz.type}> result = local.remove${data.type}(id);
        return result.mapper(${mapper.type}::mapperTo${data.type});
    }
}
]]></file>
    <file name="${mapper.type}.java" layer="rest" dir="." pkg="${pkg}.mapper">
<![CDATA[
import ${pkg}.data.${data.type};
import ${basePkg}.modelo.${clazz.type};

public class ${mapper.type} {
  
    public static ${data.type} mapperTo${data.type}(${clazz.type} ${clazz.var}){
        ${data.type} ${data.var} = new ${data.type}();
        <% attr.each{  %>
        ${data.var}.${it.set}(${clazz.var}.${it.get}());<% } %>
        <% attr2.each{  %>
        //${data.var}.${it.set}(${clazz.var}.${it.get}());<% } %>
        return ${data.var};
    }
  
    public static ${clazz.type} mapperTo${clazz.type}(${data.type} ${data.var}){
        ${clazz.type} ${clazz.var} = new ${clazz.type}();
        <% attr.each{  %>
        ${clazz.var}.${it.set}(${data.var}.${it.get}());<% } %>
        <% attr2.each{  %>
        //${clazz.var}.${it.set}(${data.var}.${it.get}());<% } %>
        return ${clazz.var};
    }
}
]]></file>
    <% } %>
</files>
