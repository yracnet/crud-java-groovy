<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def clazz  = fn.deduce(entity.clazz)
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def impl   = fn.deduceName(entity.clazz, 'Impl')
    def func   = fn.deduceName(entity.clazz, 'Func')
    def logic  = fn.deduceName2(entity.clazz, 'Logic')
    def validate  = fn.deduceName2(entity.clazz, 'Validate')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${logic.type}.java" layer="logic" dir="." pkg="${pkg}">
<![CDATA[
import bo.gob.bcb.Filter;
import bo.gob.bcb.filter.FilterBuilder;
import bo.gob.bcb.result.ResultList;
import bo.gob.bcb.result.ResultVoid;
import bo.gob.bcb.result.ResultObject;
import bo.gob.bcb.result.ResultFactory;
import bo.gob.bcb.validate.Summary;
import java.util.List;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.stream.Stream;
import ${basePkg}.model.${entity.clazz};
import ${basePkg}.validate.${validate.type};

@Stateless
@LocalBean
public class ${logic.type} {

    @PersistenceContext(unitName = "param-persit")
    private EntityManager em;

    public ${logic.type}() {
    }

    public ${logic.type}(EntityManager em) {
        this.em = em;
    }

    public Stream<${clazz.type}> ${data.var}Stream(Filter filter) {
        return FilterBuilder.create(${clazz.type}.class, filter).executeStream(em);
    }

    public ResultList<${clazz.type}> ${data.var}Query(Filter filter) {
        ResultList<${clazz.type}> result = new ResultList();
        List<${clazz.type}> list = FilterBuilder.create(${clazz.type}.class, filter).executeQuery(em);
        result.setValue(list);
        return result;
    }

    public ResultObject<${clazz.type}> ${data.var}Find(Long id) {
        ${clazz.type} ${data.var} = em.find(${clazz.type}.class, id);
        return ResultFactory.createResultObject(${data.var}, ${data.var} == null);
    }

    public ResultObject<${clazz.type}> ${data.var}Persist(${clazz.type} ${clazz.var}) {
        ResultObject result = new ResultObject();
        Summary summary = ${validate.type}.validateCreate${clazz.type}(${clazz.var});
        if (summary.hasReason()) {
            result.addError(summary.getMessage(), summary.getReason());
            return result;
        }
        em.persist(${clazz.var});
        result.setValue(${clazz.var});
        result.addSuccess("El ${data.text} fue registrado correctamente", "Puede proceder a realizar mas operaciones");
        return result;
    }

    public ResultObject<${clazz.type}> ${data.var}Merge(${clazz.type} ${clazz.var}) {
        ResultObject result = new ResultObject();
        Summary summary = ${validate.type}.validateUpdate${clazz.type}(${clazz.var});
        if (summary.hasReason()) {
            result.addError(summary.getMessage(), summary.getReason());
            return result;
        }
        ${clazz.var} = em.merge(${clazz.var});
        result.setValue(${clazz.var});
        result.addSuccess("El ${data.text} fue actualizado correctamente", "Puede proceder a realizar mas operaciones");
        return result;
    }

    public ResultVoid ${data.var}Remove(Long id) {
        ${clazz.type} ${data.var} = em.find(${clazz.type}.class, id);
        return ${data.var}Remove(${data.var});
    }

    public ResultVoid ${data.var}Remove(${clazz.type} ${clazz.var}) {
        ResultVoid result = new ResultVoid();
        Summary summary = ${validate.type}.validateRemove${clazz.type}(${clazz.var});
        if (summary.hasReason()) {
            result.addError(summary.getMessage(), summary.getReason());
            return result;
        }
        em.remove(${clazz.var});
        result.addSuccess("El ${data.text} fue eliminado correctamente", "Puede proceder a realizar mas operaciones");
        return result;
    }
}
]]></file>
    <% } %>
</files>
