<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def pkg    = fn.pkg(groupId, artifactId, module);  
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def message = fn.deduceName(entity.clazz, 'Message')
    def crud    = fn.deduceName(entity.clazz, 'CRUD')
    def inbox   = fn.deduceName(entity.clazz, 'Inbox')
    def create  = fn.deduceName(entity.clazz, 'Create')
    def update  = fn.deduceName(entity.clazz, 'Update')
    def remove  = fn.deduceName(entity.clazz, 'Remove')
    def detail  = fn.deduceName(entity.clazz, 'Detail')
    def search  = fn.deduceName(entity.clazz, 'Search')
    def proc01 = fn.deduceName(entity.clazz, 'Proc01')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${detail.type}.tsx" layer="view" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.type} } from "../${data.type}Model";
import { ${data.var}Reload } from "../${data.type}Rest";
import { ${data.type}View } from "../part/${data.type}View";

export interface ${detail.type}Props extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}

interface ${detail.type}State {
    ${data.var}?: ${data.type};
}

class ${detail.type}Local extends React.PureComponent<${detail.type}Props, ${detail.type}State> {
    constructor(props: ${detail.type}Props) {
        super(props);
        this.state = {};
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.cancelClick = this.cancelClick.bind(this);
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { cancelClick } = this;
        let { ${data.var} } = this.state;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Detalle ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}View value={${data.var}} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${detail.type} = withRouter(${detail.type}Local);

]]></file>
    <% } %>
</files>
