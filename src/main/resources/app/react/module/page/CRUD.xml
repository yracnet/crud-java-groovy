<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def feedback = fn.deduceName(entity.clazz, 'Feedback')
    def crud    = fn.deduceName(entity.clazz, 'CRUD')
    def inbox   = fn.deduceName(entity.clazz, 'Inbox')
    def create  = fn.deduceName(entity.clazz, 'Create')
    def update  = fn.deduceName(entity.clazz, 'Update')
    def remove  = fn.deduceName(entity.clazz, 'Remove')
    def detail  = fn.deduceName(entity.clazz, 'Detail')
    def search  = fn.deduceName(entity.clazz, 'Search')
    def proc01 = fn.deduceName(entity.clazz, 'Proc01')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${crud.type}.tsx" layer="view" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button, ObjectInputTextValidate, InputTextValue, InputTextFactory } from "ui-fast";

import { ${data.type}, ${data.type}Feedback, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Create, ${data.var}Remove, ${data.var}Update } from "../${data.type}Serv";
import { ${data.type}Form } from "../part/${data.type}Form";
import { ${data.type}View } from "../part/${data.type}View";
import { isRequired } from "../../Validate";

type StateType = "CREATE" | "UPDATE" | "REMOVE" | "ERROR";
export interface ${crud.type}Event {
    state: StateType;
    index: number;
    ${data.var}: ${data.type};
}

interface ${crud.type}State {
    state: "NEW" | "EDIT" | "SAVE"
    backup: ${data.type},
    ${data.var}: ${data.type},
    feedback: ${data.type}Feedback,
}

export interface ${crud.type}Props {
    index: number,
    ${data.var}: ${data.type},
    allowUpdate?: boolean,
    allowRemove?: boolean,
    eventListener?: (event: ${crud.type}Event) => void
}

export class ${crud.type} extends React.PureComponent<${crud.type}Props, ${crud.type}State> {

    private validate: ${data.type}Validate & ObjectInputTextValidate = {<% attr.each{  %>
        ${it.var}: [isRequired],<% } %>
    }

    constructor(props: ${crud.type}Props) {
        super(props);
        let ${data.var} = props.${data.var};
        this.state = {
            feedback: {},
            ${data.var}: ${data.var},
            backup: ${data.var},
            state: ${data.var}.id ? "SAVE" : "NEW"
        };
        this.onValue = this.onValue.bind(this);
        this.refuseFeedback = this.refuseFeedback.bind(this);
        this.editClick = this.editClick.bind(this);
        this.createClick = this.createClick.bind(this);
        this.updateClick = this.updateClick.bind(this);
        this.removeClick = this.removeClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(inputValue: InputTextValue) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let feedback: any = Object.assign({}, this.state.feedback);
        ${data.var}[inputValue.name] = inputValue.value;
        feedback[inputValue.name] = InputTextFactory.createFeedback(inputValue);
        this.setState({ ${data.var}, feedback });
    }

    createClick() {
        let { ${data.var}, state } = this.state;
        if (state === "NEW") {
            ${data.var}Create(${data.var}, (data) => {
                state = "SAVE";
                ${data.var} = data;
                this.setState({ state, ${data.var} });
                this.eventListener("CREATE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        }
    }

    updateClick() {
        let { ${data.var}, state } = this.state;
        if (state === "EDIT") {
            ${data.var}Update(${data.var}, (data) => {
                state = "SAVE";
                ${data.var} = data;
                this.setState({ state, ${data.var} });
                this.eventListener("UPDATE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        }
    }

    removeClick() {
        let { ${data.var}, state } = this.state;
        if (state !== "NEW") {
            ${data.var}Remove(${data.var}, (data) => {
                ${data.var} = data;
                this.eventListener("REMOVE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        } else {
            this.eventListener("REMOVE", ${data.var});
        }
    }

    eventListener(state: StateType, ${data.var}: ${data.type}) {
        let { eventListener, index } = this.props;
        let event: ${crud.type}Event = {
            state: state,
            ${data.var}: ${data.var},
            index: index
        };
        if (eventListener) {
            eventListener(event);
        }
    }

    editClick() {
        let { ${data.var} } = this.state;
        this.setState({ backup: ${data.var}, state: "EDIT" });
    }

    cancelClick() {
        let { backup } = this.state;
        this.setState({ ${data.var}: backup, state: "SAVE" });
    }

    refuseFeedback(): string {
        let { ${data.var}, feedback } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.text} no es valido!";
        }
        let other: any = ${data.var} || {};
        feedback = InputTextFactory.createFeedbackObjectFromObject(other, validate);
        let errors = Object.keys(feedback).length;
        if (errors > 0) {
            this.setState({ feedback }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o m√°s errores. (" + errors + ")";
        }
        return "";
    }

    render(): React.ReactNode {
        let { state, ${data.var}, feedback } = this.state;
        let { editClick, cancelClick, createClick, updateClick, removeClick, onValue, validate, refuseFeedback } = this;
        let { allowRemove, allowUpdate } = this.props;
        let id${data.type} = ${data.var} ? ${data.var}.id : "?";
        return (
            state === "SAVE" ?
                <Panel>
                    <title>Edicion ${data.type} <sub>{id${data.type}}</sub> </title>
                    <${data.type}View value={${data.var}} />
                    <Action>
                        <Button name="apply"
                            text="Eliminar"
                            hide={!allowRemove}
                            onClick={removeClick}
                            icon="trash"
                            variant="danger"
                            confirm="Esta seguro de eliminar el registro?" />
                        <Button name="apply"
                            text="Editar"
                            hide={!allowUpdate}
                            onClick={editClick}
                            icon="pencil"
                            variant="primary" />
                    </Action>
                </Panel>
                :
                state === "NEW" ?
                    <Panel>
                        <title>Registro ${data.type}</title>
                        <${data.type}Form value={${data.var}}
                            onValue={onValue}
                            feedback={feedback}
                            validate={validate} />
                        <Action>
                            <Button name="apply"
                                text="Cancelar"
                                onClick={removeClick}
                                icon="arrow-circle-left"
                                variant="warning" />
                            <Button name="apply"
                                text="Guardar"
                                hide={state !== "NEW"}
                                onClick={createClick}
                                icon="check-circle"
                                variant="primary"
                                refuse={refuseFeedback}
                                confirm="Esta seguro de crear el registro?" />
                        </Action>
                    </Panel>
                    :
                    <Panel>
                        <title>Edicion ${data.type} <sub>{id${data.type}}</sub> </title>
                        <${data.type}Form value={${data.var}}
                            onValue={onValue}
                            feedback={feedback}
                            validate={validate} />
                        <Action>
                            <Button name="apply"
                                text="Cancelar"
                                onClick={cancelClick}
                                icon="arrow-circle-left"
                                variant="warning" />
                            <Button name="apply"
                                text="Actualizar"
                                hide={state !== "EDIT"}
                                onClick={updateClick}
                                icon="check-circle"
                                variant="primary"
                                refuse={refuseFeedback}
                                confirm="Esta seguro de actualizar el registro?" />
                        </Action>
                    </Panel>
        );
    };
}
]]></file>
    <% } %>
</files>
