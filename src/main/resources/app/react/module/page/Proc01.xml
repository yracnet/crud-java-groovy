<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def message = fn.deduceName(entity.clazz, 'Message')
    def crud    = fn.deduceName(entity.clazz, 'CRUD')
    def inbox   = fn.deduceName(entity.clazz, 'Inbox')
    def create  = fn.deduceName(entity.clazz, 'Create')
    def update  = fn.deduceName(entity.clazz, 'Update')
    def remove  = fn.deduceName(entity.clazz, 'Remove')
    def detail  = fn.deduceName(entity.clazz, 'Detail')
    def search  = fn.deduceName(entity.clazz, 'Search')
    def proc01 = fn.deduceName(entity.clazz, 'Proc01')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${proc01.type}.tsx" layer="view" dir="${data.path}/page"><![CDATA[
import React from "react";
import Help, { Panel, Increase } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${crud.type}, ${crud.type}Event } from "./${crud.type}";
import { ${data.type} } from "../${data.type}Model";
import { ${data.var}Remove, ${data.var}Filter } from "../${data.type}Serv";
export interface ${proc01.type}Props extends RouteComponentProps {
    hide?: boolean,
}

interface ${proc01.type}State {
    values: Array<${data.type}>;
}

class ${proc01.type}Local extends React.PureComponent<${proc01.type}Props, ${proc01.type}State> {

    constructor(props: ${proc01.type}Props) {
        super(props);
        this.state = {
            values: []
        };
        this.${data.var}Append = this.${data.var}Append.bind(this);
        this.${data.var}Remove = this.${data.var}Remove.bind(this);
        this.setValues = this.setValues.bind(this);
        this.eventListener = this.eventListener.bind(this);
        if(!props.hide){
            ${data.var}Filter({}, (data) => {
                this.setValues(data);
            });
        }
    }

    ${data.var}Append(index: number) {
        let { values } = this.state;
        values = Help.insertArray(values, index, {});
        this.setValues(values);
    }

    ${data.var}Remove(${data.var}: ${data.type}, index: number) {
        let { values } = this.state;
        if (${data.var}.id) {
            ${data.var}Remove(${data.var}, () => {
                values = values.filter(it => it !== ${data.var});
                this.setValues(values);
            });
        } else {
            values = values.filter(it => it !== ${data.var});
            this.setValues(values);
        }
    }

    eventListener(event: ${crud.type}Event) {
        let { values } = this.state;
        let ${data.var} = values[event.index];
        if (${data.var} && event.state === "REMOVE") {
            values = values.filter(it => it !== ${data.var});
            this.setValues(values);
        } else if (${data.var} && event.state !== "ERROR") {
            values[event.index] = event.${data.var};
            this.setValues(values);
        }
    }

    setValues(values: ${data.type}[]) {
        //force clear
        this.setState({ values: [] }, () => {
            //restore new values
            this.setState({ values: values }, () => {
                //this.forceUpdate();
            });
        });
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { values } = this.state;
        let { ${data.var}Append, ${data.var}Remove, eventListener } = this;
        let ${data.var}Form = (${data.var}: ${data.type}, index: number) => {
            return (
                <${crud.type}
                    ${data.var}={${data.var}}
                    index={index}
                    allowUpdate={true}
                    allowRemove={false}
                    eventListener={eventListener}
                />
            )
        }
        return (
            <Panel icon="pencil"
                variant="primary"
                col={8}
                align="center">
                <title>Correos Electronicos</title>
                <Increase values={values}
                    onContent={${data.var}Form}
                    appendMode="row"
                    onAppend={${data.var}Append}
                    onRemove={${data.var}Remove}
                    confirmRemove="Esta seguro de eliminar el registro"
                    minimum={1}
                    maximum={5}>
                </Increase>
            </Panel>
        );
    };
}

export const ${proc01.type} = withRouter(${proc01.type}Local);
]]></file>
    <% } %>
</files>
