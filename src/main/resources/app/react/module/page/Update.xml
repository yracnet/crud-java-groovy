<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def message = fn.deduceName(entity.clazz, 'Message')
    def crud    = fn.deduceName(entity.clazz, 'CRUD')
    def inbox   = fn.deduceName(entity.clazz, 'Inbox')
    def create  = fn.deduceName(entity.clazz, 'Create')
    def update  = fn.deduceName(entity.clazz, 'Update')
    def remove  = fn.deduceName(entity.clazz, 'Remove')
    def detail  = fn.deduceName(entity.clazz, 'Detail')
    def search  = fn.deduceName(entity.clazz, 'Search')
    def proc01 = fn.deduceName(entity.clazz, 'Proc01')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${update.type}.tsx" layer="view" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextValue, InputTextFactory } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";
import { ${data.type}, ${data.type}Feedback, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Reload, ${data.var}Update } from "../${data.type}Serv";
import { ${data.type}Form } from "../part/${data.type}Form";
import { isRequired } from "../../Validate";

export interface ${update.type}Props extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}

interface ${update.type}State {
    feedback: ${data.type}Feedback;
    ${data.var}?: ${data.type};
}

class ${update.type}Local extends React.PureComponent<${update.type}Props, ${update.type}State> {

    private validate: ${data.type}Validate = {<% attr.each{  %>
        ${it.var}: [isRequired],<% } %>
    }

    constructor(props: ${update.type}Props) {
        super(props);
        this.state = {
            feedback: {},
            ${data.var}: undefined
        };
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.onValue = this.onValue.bind(this);
        this.refuseFeedback = this.refuseFeedback.bind(this);
        this.updateClick = this.updateClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(inputValue: InputTextValue) {
        let ${data.var}: ${data.type} = Object.assign({}, this.state.${data.var});
        let feedback: ${data.type}Feedback = Object.assign({}, this.state.feedback);
        ${data.var}[inputValue.name] = inputValue.value;
        feedback[inputValue.name] = InputTextFactory.createFeedback(inputValue);
        this.setState({ ${data.var}, feedback });
    }

    refuseFeedback(): string {
        let { ${data.var}, feedback } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.text} no es valido!";
        }
        let other: ${data.type} = ${data.var} || {};
        feedback = InputTextFactory.createFeedbackObjectFromObject(other, validate);
        let errors = Object.keys(feedback).length;
        if (errors > 0) {
            this.setState({ feedback }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o mÃ¡s errores. (" + errors + ")";
        }
        return "";
    }

    updateClick() {
        let value: ${data.type} = this.state.${data.var} || {};
        ${data.var}Update(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var}, feedback } = this.state;
        let { updateClick, cancelClick, refuseFeedback, onValue, validate } = this;
        return (
            <Panel icon="pencil"
                variant="warning"
                col={8}
                align="center">
                <title>Modificar ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}Form 
                    value={${data.var}}
                    onValue={onValue}
                    feedback={feedback}
                    validate={validate} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={updateClick}
                            text="Guardar"
                            icon="check-circle"
                            variant="primary"
                            refuse={refuseFeedback}
                            confirm="Esta seguro de actualizar el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${update.type} = withRouter(${update.type}Local);
]]></file>
    <% } %>
</files>
