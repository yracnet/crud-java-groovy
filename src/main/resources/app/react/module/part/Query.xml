<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def pkg    = fn.pkg(groupId, artifactId, module);  
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def message = fn.deduceName(entity.clazz, 'Message')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def viewCtrl = fn.deduceName(entity.clazz, '-ctrl')
    def viewPart = fn.deduceName(entity.clazz, '-part')
    def viewServ = fn.deduceName(entity.clazz, '-serv')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${data.type}Query.tsx" layer="view" dir="${data.path}/part"><![CDATA[
import React from "react";
import { Grid, LabelText, FilterText, FilterTextChange } from "ui-fast";
import { ${data.type}Filter } from "../${data.type}Model";
import { toString } from "../../Convert";

export interface ${data.type}QueryProps {
  value: ${data.type}Filter,
  onChange: FilterTextChange
}

export const ${data.type}Query: React.SFC<${data.type}QueryProps> = (props) => {
  let { value, onChange } = props;
  return (
    <Grid
      colsLg={[4, 2, 2, 2, 2, 2]}
      cols={[12]}
      colsMd={[12, 6, 6, 6, 6, 6]}>
<% attr.each{  %>
      <LabelText value="${it.text}" >
        <FilterText name="${it.var}"
          value={value.${it.var}}
          onChange={onChange}
          onConvert={toString}
          option="number" />
      </LabelText>
<% } %>
    </Grid>
  );
}
]]></file>
    <% } %>
</files>
