<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def pkg    = fn.pkg(groupId, artifactId, module);  
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def message = fn.deduceName(entity.clazz, 'Message')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def viewCtrl = fn.deduceName(entity.clazz, '-ctrl')
    def viewPart = fn.deduceName(entity.clazz, '-part')
    def viewServ = fn.deduceName(entity.clazz, '-serv')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    //attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    //attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    //attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${data.type}Form.tsx" layer="view" dir="${data.path}/part"><![CDATA[
import React from "react";
import { Grid, InputText, FnInputTextChange, LabelText, Alert } from "ui-fast";
import { ${data.type}, ${data.type}Feedback, ${data.type}Validate } from "../${data.type}Model";
import { toString } from "../../Convert";

export interface ${data.type}FormProps {
  value?: ${data.type},
  feedback?: ${data.type}Feedback,
  validate?: ${data.type}Validate,
  onValue?: FnInputTextChange
}

export const ${data.type}Form: React.SFC<${data.type}FormProps> = (props) => {
  let { value, onValue, feedback, validate } = props;
  feedback = feedback || {};
  validate = validate ? validate : {};
  return (
    value ?
      <Grid
        colsLg={[4, 2, 2, 2, 2, 2]}
        cols={[12]}
        colsMd={[12, 6, 6, 6, 6, 6]}>
<% attr.each{  %>
        <LabelText value="${it.text}" >
          <InputText name="${it.var}"
            value={value.${it.var}} 
            onChange={onValue}
            feedback={feedback.${it.var}}
            onValidate={validate.${it.var}}
            onFormat={toString}
            onConvert={toString} />
        </LabelText>
<% } %>
      </Grid>
      :
      <Alert variant="danger"
        message="Se requiere un objeto instanciado"
        icon="warning" />
  );
}
]]></file>
    <% } %>
</files>
