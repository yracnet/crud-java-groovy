<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    %>
    <!-- <%= entityRef %> -->
    <%
    entityRef.each {
    id, entity ->
    def pkg    = fn.pkg(groupId, artifactId, module);  
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${serv.type}.java" layer="serv" dir="." pkg="${pkg}">
<![CDATA[
import ${pkg}.state.${data.type};
import ${pkg}.state.${filter.type};
import com.github.yracnet.state.ResultNon;
import com.github.yracnet.state.ResultSet;
interface ${serv.type} {
  ResultSet<${data.type}> ${data.var}Filter(${filter.type} ${filter.var});
  ResultNon<${data.type}> ${data.var}Create(${data.type} ${data.var});
  ResultNon<${data.type}> ${data.var}Update(${data.type} ${data.var});
  ResultNon<${data.type}> ${data.var}Remove(${data.type} ${data.var});
}
]]></file>
    <file name="${data.type}.java" layer="serv" dir="." pkg="${pkg}.state">
<![CDATA[
import java.io.Serializable;
public class ${data.type} implements Serializable {
<% attr.each{  %>
   public ${it.type} ${it.var}; //${it.it}
<% } %>
}
]]>
    </file>
    <file name="${filter.type}.java" layer="serv" dir="." pkg="${pkg}.state">
<![CDATA[
import java.io.Serializable;
import com.github.yracnet.state.Filter;
public class ${filter.type} implements Serializable {
<% attr.each{  %>
   public Filter<${it.type}> ${it.var};
<% } %>
}
]]>
    </file>
    <% } %>
</files>
