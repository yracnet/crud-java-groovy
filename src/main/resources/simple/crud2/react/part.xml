<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def pkg    = fn.pkg(groupId, artifactId, module);  
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def message = fn.deduceName(entity.clazz, 'Message')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def viewCtrl = fn.deduceName(entity.clazz, '-ctrl')
    def viewPart = fn.deduceName(entity.clazz, '-part')
    def viewServ = fn.deduceName(entity.clazz, '-serv')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${data.type}Form.tsx" layer="view:domain" dir="${data.path}/part"><![CDATA[
import React from "react";
import { Grid, InputText, InputTextChange, OutputText, Alert } from "ui-fast";
import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { toString } from "../../Convert";

export interface ${data.type}FormProps {
  value?: ${data.type},
  message?: ${data.type}Message,
  validate?: ${data.type}Validate,
  onValue?: InputTextChange
}

export const ${data.type}Form: React.SFC<${data.type}FormProps> = (props) => {
  let { value, onValue, message, validate } = props;
  message = message || {};
  validate = validate ? validate : {};
  return (
    value ?
      <Grid cols="4, 8"><% attr.each{  %>
        <OutputText name="${it.var}"
          value="${it.text}" />
        <InputText name="${it.var}"
          value={value.${it.var}} 
          onChange={onValue}
          message={message.${it.var}}
          onValidate={validate.${it.var}}
          onFormat={toString}
          onConvert={toString} />
        <% } %>
      </Grid>
      :
      <Alert variant="danger"
        message="Se requiere un objeto instanciado"
        icon="warning" />
  );
}
]]></file>
    <file name="${data.type}View.tsx" layer="view:domain" dir="${data.path}/part"><![CDATA[
import React from "react";
import { Grid, OutputText, Alert } from "ui-fast";
import { ${data.type} } from "../${data.type}Model";
import { toString } from "../../Convert";

export interface ${data.type}ViewProps {
  value?: ${data.type}
}

export const ${data.type}View: React.SFC<${data.type}ViewProps> = (props) => {
  let { value } = props;
  return (
    value ?
      <Grid cols="4, 8"><% attr.each{  %>
        <OutputText name="${it.var}"
          value="${it.text}" />
        <OutputText name="${it.var}"
          value={value.${it.var}}
          onFormat={toString} />
        <% } %>
      </Grid>
      :
      <Alert variant="danger"
        message="Se requiere un objeto instanciado"
        icon="warning" />
  );
}
]]></file>
    <file name="${data.type}Table.tsx" layer="view:domain" dir="${data.path}/part"><![CDATA[
import React from "react";
import { Table, Column, TableConfig } from "ui-fast";
import { ${data.type} } from "../${data.type}Model";
import { toString } from "../../Convert";

export interface ${data.type}Table {
  values: ${data.type}[],
  select?: ${data.type} | ${data.type}[],
  onSelect?: (e: ${data.type}) => void,
  config?: TableConfig,
  onConfig?: (e: TableConfig) => void
}

export const ${data.type}Table: React.SFC<${data.type}Table> = (props) => {
  let { values, select, config, onSelect, onConfig } = props;
  return (
    <Table pk="id" values={values} select={select} config={config} onSelect={onSelect} onConfig={onConfig}><% attr.each{  %>
      <Column title="${it.text}"
        attr="${it.var}"
        onFormat={toString}
        align="right" />
      <% } %>
    </Table>
  );
}
]]></file>
    <file name="${data.type}Query.tsx" layer="view:domain" dir="${data.path}/part"><![CDATA[
import React from "react";
import { Grid, FilterText, FilterTextChange } from "ui-fast";
import { ${data.type}Filter } from "../${data.type}Model";
import { toString } from "../../Convert";

export interface ${data.type}QueryProps {
  value: ${data.type}Filter,
  onChange: FilterTextChange
}

export const ${data.type}Query: React.SFC<${data.type}QueryProps> = (props) => {
  let { value, onChange } = props;
  return (
    <Grid cols="4, 8"><% attr.each{  %>
      <FilterText name="${it.var}"
        value={value.${it.var}}
        onChange={onChange}
        label="${it.text}"
        onConvert={toString}
        option="number" />
      <% } %>
    </Grid>
  );
}
]]></file>

    <% } %>
</files>
