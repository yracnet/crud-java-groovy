<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def pkg    = fn.pkg(groupId, artifactId, module);  
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def message = fn.deduceName(entity.clazz, 'Message')
    def crud    = fn.deduceName(entity.clazz, 'CRUD')
    def inbox   = fn.deduceName(entity.clazz, 'Inbox')
    def create  = fn.deduceName(entity.clazz, 'Create')
    def update  = fn.deduceName(entity.clazz, 'Update')
    def remove  = fn.deduceName(entity.clazz, 'Remove')
    def detail  = fn.deduceName(entity.clazz, 'Detail')
    def search  = fn.deduceName(entity.clazz, 'Search')
    def proc01 = fn.deduceName(entity.clazz, 'Proc01')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${inbox.type}.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[import React from "react";

import { Panel, Action, Button } from "ui-fast";
import { FilterTextState, TableConfig } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.var}Filter } from "../${data.type}Rest";
import { ${data.type}, ${data.type}Filter } from "../${data.type}Model";
import { ${data.type}Table, ${data.type}Query } from "../${data.type}Part";

export interface ${inbox.type}Props extends RouteComponentProps {
    hide?: boolean
}

interface ${inbox.type}State {
    filter: ${data.type}Filter;
    values: Array<${data.type}>;
    select?: ${data.type};
}

class ${inbox.type}Local extends React.Component<${inbox.type}Props, ${inbox.type}State> {

    constructor(props: ${inbox.type}Props) {
        super(props);
        this.state = {
            filter: {},
            values: [],
            select: undefined
        };
        this.onSelect = this.onSelect.bind(this);
        this.onFilter = this.onFilter.bind(this);
        this.onConfig = this.onConfig.bind(this);
        this.filterClick = this.filterClick.bind(this);
        this.filterClick("apply");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return null;
        }
        let { history } = this.props;
        let { onFilter, filterClick, onConfig, onSelect } = this;
        let { filter, values, select } = this.state;
        let id = select ? select.id : '#ID#';
        let config = Object.assign({}, filter.config);
        let disabled = !select;
        return (
            <Panel>
                <title>Listado de ${data.type}s</title>
                <${data.type}Query value={filter}
                    onChange={onFilter} />
                <Action>
                    <Button name="apply"
                        onClick={filterClick}
                        icon="filter"
                        variant="primary"
                        text="Buscar" />
                    <Button name="clean"
                        onClick={filterClick}
                        icon="eraser"
                        variant="secondary"
                        text="Limpiar" />
                    <Button name="open"
                        to="/${data.var}/create"
                        history={history}
                        icon="plus-circle"
                        variant="success"
                        text="Crear" />
                    <Button name="open"
                        to={"/${data.var}/update/" + id}
                        history={history}
                        icon="pencil"
                        disabled={disabled}
                        variant="primary"
                        text="Modificar" />
                    <Button name="open"
                        to={"/${data.var}/detail/" + id}
                        history={history}
                        icon="eye"
                        disabled={disabled}
                        variant="primary"
                        text="Detalle" />
                    <Button name="open"
                        to={"/${data.var}/remove/" + id}
                        history={history}
                        icon="trash"
                        disabled={disabled}
                        variant="danger"
                        text="Eliminar" />
                </Action>
                <${data.type}Table values={values}
                    select={select}
                    config={config}
                    onSelect={onSelect}
                    onConfig={onConfig} />
            </Panel>
        );
    }

    onFilter(state: FilterTextState) {
        let filter: any = Object.assign({}, this.state.filter);
        filter[state.name] = { operator: state.operator, value: state.value };
        this.setState({ filter });
    }

    onSelect(value: ${data.type}) {
        let select = this.state.select === value ? undefined : value;
        this.setState({ select });
    }

    onConfig(value: TableConfig) {
        let filter = { ...this.state.filter };
        let config = filter.config || {};
        filter.config = Object.assign(config, value);
        this.setState({ filter }, () => {
            this.filterClick("sort");
        });
    }

    filterClick(name: string) {
        let filter = { ...this.state.filter };
        if (name === "clean") {
            filter = { config: filter.config };
            this.setState({
                select: undefined
            });
        }
        ${data.var}Filter(filter, (values: Array<${data.type}>) => {
            this.setState({ values, filter });
        }, () => {
            this.setState({ values: [], filter });
        });
    }
}

export const ${inbox.type} = withRouter(${inbox.type}Local);
]]></file>
    <file name="${create.type}.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextState, InputTextValidate } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Create } from "../${data.type}Rest";
import { ${data.type}Form } from "../${data.type}Part";
import { isRequired } from "../../Validate";

export interface ${create.type}Props extends RouteComponentProps {
    hide?: boolean,
}

interface ${create.type}State {
    message: ${data.type}Message;
    ${data.var}: ${data.type};
}

class ${create.type}Local extends React.PureComponent<${create.type}Props, ${create.type}State> {

    private validate: ${data.type}Validate = {<% attr.each{  %>
        ${it.var}: [isRequired],<% } %>
    }

    constructor(props: ${create.type}Props) {
        super(props);
        this.state = {
            message: {},
            ${data.var}: {}
        };
        this.onValue = this.onValue.bind(this);
        this.refuseMessage = this.refuseMessage.bind(this);
        this.createClick = this.createClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(state: InputTextState) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let message: any = Object.assign({}, this.state.message);
        ${data.var}[state.name] = state.value;
        message[state.name] = state.message;
        this.setState({ ${data.var}, message });
    }

    refuseMessage(): string {
        let { ${data.var}, message } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.var} no es valido!";
        }
        let other: any = ${data.var} || {};
        let attrs = Object.keys(validate);
        let states: InputTextState[] = attrs.map(attr => { return { name: attr, state: "none", value: other[attr] } });
        states.map(state => {
            let fnVals: Array<InputTextValidate> = validate[state.name];
            if (fnVals) {
                fnVals.every(fnVal => {
                    state = fnVal(state)
                    return state.state === "none";
                });
            }
            return state;
        }).filter(it => it && it.state !== "none")
            .forEach(it => { message[it.name] = { message: it.message, type: it.state, icon: "warning" } });
        if (Object.keys(message).filter(it => message[it]).length > 0) {
            this.setState({ message }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o mÃ¡s errores.";
        }
        return "";
    }

    createClick() {
        let value = this.state.${data.var} || {};
        ${data.var}Create(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var}, message } = this.state;
        let { createClick, cancelClick, refuseMessage, onValue, validate } = this;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Crear Nuevo ${data.type}</title>
                <${data.type}Form value={${data.var}} onValue={onValue} message={message} validate={validate} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={createClick}
                            text="Guardar"
                            icon="check-circle"
                            variant="primary"
                            refuse={refuseMessage}
                            confirm="Esta seguro de crear el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${create.type} = withRouter(${create.type}Local);

]]></file>
    <file name="${update.type}.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextState, InputTextValidate } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";
import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Reload, ${data.var}Update } from "../${data.type}Rest";
import { ${data.type}Form } from "../${data.type}Part";
import { isRequired } from "../../Validate";

export interface ${update.type}Props extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}
        
interface ${update.type}State {
    message: ${data.type}Message;
    ${data.var}?: ${data.type};
}

class ${update.type}Local extends React.PureComponent<${update.type}Props, ${update.type}State> {

    private validate: ${data.type}Validate = {<% attr.each{  %>
        ${it.var}: [isRequired],<% } %>
    }

    constructor(props: ${update.type}Props) {
        super(props);
        this.state = {
            message: {},
            ${data.var}: undefined
        };
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.onValue = this.onValue.bind(this);
        this.refuseMessage = this.refuseMessage.bind(this);
        this.updateClick = this.updateClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(state: InputTextState) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let message: any = Object.assign({}, this.state.message);
        ${data.var}[state.name] = state.value;
        message[state.name] = state.message;
        this.setState({ ${data.var}, message });
    }

    refuseMessage(): string {
        let { ${data.var}, message } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.text} no es valido!";
        }
        let other: any = ${data.var} || {};
        let attrs = Object.keys(validate);
        let states: InputTextState[] = attrs.map(attr => { return { name: attr, state: "none", value: other[attr] } });
        states.map(state => {
            let fnVals: Array<InputTextValidate> = validate[state.name];
            if (fnVals) {
                fnVals.every(fnVal => {
                    state = fnVal(state)
                    return state.state === "none";
                });
            }
            return state;
        }).filter(it => it && it.state !== "none")
            .forEach(it => { message[it.name] = { message: it.message, type: it.state, icon: "warning" } });
        if (Object.keys(message).filter(it => message[it]).length > 0) {
            this.setState({ message }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o mÃ¡s errores.";
        }
        return "";
    }

    updateClick() {
        let value = this.state.${data.var} || {};
        ${data.var}Update(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var}, message } = this.state;
        let { updateClick, cancelClick, refuseMessage, onValue, validate } = this;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Modificar ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}Form value={${data.var}}
                    onValue={onValue}
                    message={message}
                    validate={validate} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={updateClick}
                            text="Guardar"
                            icon="check-circle"
                            variant="primary"
                            refuse={refuseMessage}
                            confirm="Esta seguro de actualizar el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${update.type} = withRouter(${update.type}Local);
]]></file>
    <file name="${detail.type}.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.type} } from "../${data.type}Model";
import { ${data.var}Reload } from "../${data.type}Rest";
import { ${data.type}View } from "../${data.type}Part";

export interface ${detail.type}Props extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}

interface ${detail.type}State {
    ${data.var}?: ${data.type};
}

class ${detail.type}Local extends React.PureComponent<${detail.type}Props, ${detail.type}State> {
    constructor(props: ${detail.type}Props) {
        super(props);
        this.state = {};
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.cancelClick = this.cancelClick.bind(this);
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { cancelClick } = this;
        let { ${data.var} } = this.state;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Detalle ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}View value={${data.var}} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${detail.type} = withRouter(${detail.type}Local);

]]></file>
    <file name="${remove.type}.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.type} } from "../${data.type}Model";
import { ${data.var}Reload, ${data.var}Remove } from "../${data.type}Rest";
import { ${data.type}View } from "../${data.type}Part";

export interface ${remove.type}Props extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}

interface ${remove.type}State {
    ${data.var}?: ${data.type};
}

class ${remove.type}Local extends React.PureComponent<${remove.type}Props, ${remove.type}State> {

    constructor(props: ${remove.type}Props) {
        super(props);
        this.state = {};
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.removeClick = this.removeClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    removeClick() {
        let value = this.state.${data.var} || {};
        ${data.var}Remove(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }


    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var} } = this.state;
        let { cancelClick, removeClick } = this;
        return (
            <Panel icon="pencil"
                variant="warning"
                width="50">
                <title>Eliminacion ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}View value={${data.var}} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={removeClick}
                            text="Eliminar"
                            icon="check-circle"
                            variant="danger"
                            confirm="Esta seguro de eliminar el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${remove.type} = withRouter(${remove.type}Local);

]]></file>
    <file name="${search.type}.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";

import { Panel, Action, Button } from "ui-fast";
import { FilterTextState, TableConfig } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.var}Filter } from "../${data.type}Rest";
import { ${data.type}, ${data.type}Filter } from "../${data.type}Model";
import { ${data.type}Table, ${data.type}Query } from "../${data.type}Part";

export interface ${search.type}Props extends RouteComponentProps {
    hide?: boolean,
    selectClick: (${data.var}: ${data.type}) => void,
    cancelClick: () => void
}

interface ${search.type}State {
    filter: ${data.type}Filter;
    values: Array<${data.type}>;
    select?: ${data.type};
}

class ${search.type}Local extends React.Component<${search.type}Props, ${search.type}State> {

    constructor(props: ${search.type}Props) {
        super(props);
        this.state = {
            filter: {},
            values: [],
            select: undefined
        };
        this.onSelect = this.onSelect.bind(this);
        this.onFilter = this.onFilter.bind(this);
        this.onConfig = this.onConfig.bind(this);
        this.filterClick = this.filterClick.bind(this);
        this.selectClickInvoke = this.selectClickInvoke.bind(this);
        this.cancelClickInvoke = this.cancelClickInvoke.bind(this);
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return null;
        }
        let { onFilter, filterClick, onConfig, onSelect, cancelClickInvoke, selectClickInvoke } = this;
        let { filter, values, select } = this.state;
        let config = Object.assign({}, filter.config);
        let disabled = !select;
        return (
            <Panel mode="modal" width="80" variant="primary">
                <header>Buscar ${data.type}</header>
                <${data.type}Query value={filter}
                    onChange={onFilter} />
                <Action>
                    <Button name="apply"
                        onClick={filterClick}
                        icon="filter"
                        variant="primary"
                        text="Buscar" />
                    <Button name="clean"
                        onClick={filterClick}
                        icon="eraser"
                        variant="secondary"
                        text="Limpiar" />
                    <Button name="open"
                        icon="check"
                        disabled={disabled}
                        onClick={selectClickInvoke}
                        variant="primary"
                        text="Aceptar" />
                    <Button name="open"
                        icon="trash"
                        onClick={cancelClickInvoke}
                        variant="danger"
                        text="Cancelar" />
                </Action>
                <${data.type}Table values={values}
                    select={select}
                    config={config}
                    onSelect={onSelect}
                    onConfig={onConfig} />
            </Panel>
        );
    }

    selectClickInvoke() {
        let { selectClick } = this.props;
        let { select } = this.state;
        if (selectClick && select) {
            selectClick(select);
        }
    }

    cancelClickInvoke() {
        let { cancelClick } = this.props;
        if (cancelClick) {
            cancelClick();
        }
    }

    onFilter(state: FilterTextState) {
        let filter: any = Object.assign({}, this.state.filter);
        filter[state.name] = { operator: state.operator, value: state.value };
        this.setState({ filter });
    }

    onSelect(value: ${data.type}) {
        let select = this.state.select === value ? undefined : value;
        this.setState({ select });
    }

    onConfig(value: TableConfig) {
        let filter = { ...this.state.filter };
        let config = filter.config || {};
        filter.config = Object.assign(config, value);
        this.setState({ filter }, () => {
            this.filterClick("sort");
        });
    }

    filterClick(name: string) {
        let filter = { ...this.state.filter };
        if (name === "clean") {
            filter = { config: filter.config };
        }
        ${data.var}Filter(filter, (values: Array<${data.type}>) => {
            this.setState({ values, filter, select: undefined });
        }, () => {
            this.setState({ values: [], filter, select: undefined });
        });
    }
}

export const ${search.type} = withRouter(${search.type}Local);

]]></file>
    <file name="${crud.type}.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextValidate, InputTextState } from "ui-fast";

import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Create, ${data.var}Remove, ${data.var}Update } from "../${data.type}Rest";
import { ${data.type}Form, ${data.type}View } from "../${data.type}Part";
import { isRequired } from "../../Validate";

type StateType = "CREATE" | "UPDATE" | "REMOVE" | "ERROR";
export interface ${crud.type}Event {
    state: StateType;
    index: number;
    ${data.var}: ${data.type};
}

interface ${crud.type}State {
    message: ${data.type}Message,
    backup: ${data.type},
    ${data.var}: ${data.type},
    state: "NEW" | "EDIT" | "SAVE",
}

export interface ${crud.type}Props {
    index: number,
    ${data.var}: ${data.type},
    allowUpdate?: boolean,
    allowRemove?: boolean,
    eventListener?: (event: ${crud.type}Event) => void
}

export class ${crud.type} extends React.PureComponent<${crud.type}Props, ${crud.type}State> {

    private validate: ${data.type}Validate = {<% attr.each{  %>
        ${it.var}: [isRequired],<% } %>
    }

    constructor(props: ${crud.type}Props) {
        super(props);
        let ${data.var} = props.${data.var};
        this.state = {
            message: {},
            ${data.var}: ${data.var},
            backup: ${data.var},
            state: ${data.var}.id ? "SAVE" : "NEW"
        };
        this.onValue = this.onValue.bind(this);
        this.refuseMessage = this.refuseMessage.bind(this);
        this.editClick = this.editClick.bind(this);
        this.createClick = this.createClick.bind(this);
        this.updateClick = this.updateClick.bind(this);
        this.removeClick = this.removeClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(state: InputTextState) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let message: any = Object.assign({}, this.state.message);
        ${data.var}[state.name] = state.value;
        message[state.name] = state.message;
        this.setState({ ${data.var}, message });
    }

    createClick() {
        let { ${data.var}, state } = this.state;
        if (state === "NEW") {
            ${data.var}Create(${data.var}, (data) => {
                state = "SAVE";
                ${data.var} = data;
                this.setState({ state, ${data.var} });
                this.eventListener("CREATE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        }
    }

    updateClick() {
        let { ${data.var}, state } = this.state;
        if (state === "EDIT") {
            ${data.var}Update(${data.var}, (data) => {
                state = "SAVE";
                ${data.var} = data;
                this.setState({ state, ${data.var} });
                this.eventListener("UPDATE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        }
    }

    removeClick() {
        let { ${data.var}, state } = this.state;
        if (state !== "NEW") {
            ${data.var}Remove(${data.var}, (data) => {
                ${data.var} = data;
                this.eventListener("REMOVE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        } else {
            this.eventListener("REMOVE", ${data.var});
        }
    }

    eventListener(state: StateType, ${data.var}: ${data.type}) {
        let { eventListener, index } = this.props;
        let event: ${crud.type}Event = {
            state: state,
            ${data.var}: ${data.var},
            index: index
        };
        if (eventListener) {
            eventListener(event);
        }
    }

    editClick() {
        let { ${data.var} } = this.state;
        this.setState({ backup: ${data.var}, state: "EDIT" });
    }

    cancelClick() {
        let { backup } = this.state;
        this.setState({ ${data.var}: backup, state: "SAVE" });
    }

    refuseMessage(): string {
        let { ${data.var}, message } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.var} no es valido!";
        }
        let other: any = ${data.var} || {};
        let attrs = Object.keys(validate);
        let states: InputTextState[] = attrs.map(attr => { return { name: attr, state: "none", value: other[attr] } });
        states.map(state => {
            let fnVals: Array<InputTextValidate> = validate[state.name];
            if (fnVals) {
                fnVals.every(fnVal => {
                    state = fnVal(state)
                    return state.state === "none";
                });
            }
            return state;
        }).filter(it => it && it.state !== "none")
            .forEach(it => { message[it.name] = { message: it.message, type: it.state, icon: "warning" } });
        if (Object.keys(message).filter(it => message[it]).length > 0) {
            this.setState({ message }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o mÃ¡s errores.";
        }
        return "";
    }

    render(): React.ReactNode {
        let { state, ${data.var}, message } = this.state;
        let { editClick, cancelClick, createClick, updateClick, removeClick, onValue, validate, refuseMessage } = this;
        let { allowRemove, allowUpdate } = this.props;
        let id${data.type} = ${data.var} ? ${data.var}.id : "?";
        return (
            state === "SAVE" ?
                <Panel>
                    <title>Edicion ${data.type} <sub>{id${data.type}}</sub> </title>
                    <${data.type}View value={${data.var}} />
                    <Action>
                        <Button name="apply"
                            text="Eliminar"
                            hide={!allowRemove}
                            onClick={removeClick}
                            icon="trash"
                            variant="danger"
                            confirm="Esta seguro de eliminar el registro?" />
                        <Button name="apply"
                            text="Editar"
                            hide={!allowUpdate}
                            onClick={editClick}
                            icon="pencil"
                            variant="primary" />
                    </Action>
                </Panel>
                :
                state === "NEW" ?
                    <Panel>
                        <title>Registro ${data.type}</title>
                        <${data.type}Form value={${data.var}}
                            onValue={onValue}
                            message={message}
                            validate={validate} />
                        <Action>
                            <Button name="apply"
                                text="Cancelar"
                                onClick={removeClick}
                                icon="arrow-circle-left"
                                variant="warning" />
                            <Button name="apply"
                                text="Guardar"
                                hide={state !== "NEW"}
                                onClick={createClick}
                                icon="check-circle"
                                variant="primary"
                                refuse={refuseMessage}
                                confirm="Esta seguro de crear el registro?" />
                        </Action>
                    </Panel>
                    :
                    <Panel>
                        <title>Edicion ${data.type} <sub>{id${data.type}}</sub> </title>
                        <${data.type}Form value={${data.var}}
                            onValue={onValue}
                            message={message}
                            validate={validate} />
                        <Action>
                            <Button name="apply"
                                text="Cancelar"
                                onClick={cancelClick}
                                icon="arrow-circle-left"
                                variant="warning" />
                            <Button name="apply"
                                text="Actualizar"
                                hide={state !== "EDIT"}
                                onClick={updateClick}
                                icon="check-circle"
                                variant="primary"
                                refuse={refuseMessage}
                                confirm="Esta seguro de actualizar el registro?" />
                        </Action>
                    </Panel>
        );
    };
}
]]></file>
    <file name="${proc01.type}.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import Help, { Panel, Increase } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${crud.type}, ${crud.type}Event } from "./${crud.type}";
import { ${data.type} } from "../${data.type}Model";
import { ${data.var}Remove, ${data.var}Filter } from "../${data.type}Rest";
export interface ${proc01.type}Props extends RouteComponentProps {
    hide?: boolean,
}

interface ${proc01.type}State {
    values: Array<${data.type}>;
}

class ${proc01.type}Local extends React.PureComponent<${proc01.type}Props, ${proc01.type}State> {

    constructor(props: ${proc01.type}Props) {
        super(props);
        this.state = {
            values: []
        };
        this.${data.var}Append = this.${data.var}Append.bind(this);
        this.${data.var}Remove = this.${data.var}Remove.bind(this);
        this.setValues = this.setValues.bind(this);
        this.eventListener = this.eventListener.bind(this);
        ${data.var}Filter({}, (data) => {
            this.setValues(data);
        });
    }

    ${data.var}Append(index: number) {
        let { values } = this.state;
        values = Help.insertArray(values, index, {});
        this.setValues(values);
    }

    ${data.var}Remove(${data.var}: ${data.type}, index: number) {
        let { values } = this.state;
        if (${data.var}.id) {
            ${data.var}Remove(${data.var}, () => {
                values = values.filter(it => it !== ${data.var});
                this.setValues(values);
            });
        } else {
            values = values.filter(it => it !== ${data.var});
            this.setValues(values);
        }
    }

    eventListener(event: ${crud.type}Event) {
        let { values } = this.state;
        let ${data.var} = values[event.index];
        if (${data.var} && event.state === "REMOVE") {
            values = values.filter(it => it !== ${data.var});
            this.setValues(values);
        } else if (${data.var} && event.state !== "ERROR") {
            values[event.index] = event.${data.var};
            this.setValues(values);
        }
    }

    setValues(values: ${data.type}[]) {
        //force clear
        this.setState({ values: [] }, () => {
            //restore new values
            this.setState({ values: values }, () => {
                //this.forceUpdate();
            });
        });
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { values } = this.state;
        let { ${data.var}Append, ${data.var}Remove, eventListener } = this;
        let ${data.var}Form = (${data.var}: ${data.type}, index: number) => {
            return (
                <${crud.type}
                    ${data.var}={${data.var}}
                    index={index}
                    allowUpdate={true}
                    allowRemove={false}
                    eventListener={eventListener}
                />
            )
        }
        return (
            <Panel icon="pencil" variant="warning" width="90">
                <title>Correos Electronicos</title>
                <Increase values={values}
                    onContent={${data.var}Form}
                    appendMode="row"
                    onAppend={${data.var}Append}
                    onRemove={${data.var}Remove}
                    minimum={0}
                    maximum={5}>
                </Increase>
            </Panel>
        );
    };
}

export const ${proc01.type} = withRouter(${proc01.type}Local);
]]></file>
    <file name="${data.type}Page.tsx" layer="view:domain" dir="${data.path}"><![CDATA[

import React from "react";
import { Panel, Button } from "ui-fast";
import { Route, Switch } from "react-router-dom";
import { ${inbox.type} } from "./page/${inbox.type}";
import { ${create.type} } from "./page/${create.type}";
import { ${update.type} } from "./page/${update.type}";
import { ${detail.type} } from "./page/${detail.type}";
import { ${remove.type} } from "./page/${remove.type}";
import { ${search.type} } from "./page/${search.type}";
import { ${proc01.type} } from "./page/${proc01.type}";
import { ${data.var}Ping } from "./${rest.type}";

export const ${data.type}Manager: React.SFC = () => {

    let pingClick = function (name: string) {
        ${data.var}Ping();
    }

    return (
        <Panel>
            <header>
                <Button name="apply"
                    onClick={pingClick}
                    icon="bell"
                    variant="primary"
                    mode="link" />
                Administracion de ${data.type}(s)
            </header>
            <Switch>
                <Route path="/${data.var}/search" component={${search.type}} />
                <Route path="/${data.var}/proc01" component={${proc01.type}} />
                <Route path="/${data.var}/create" component={${create.type}} />
                <Route path="/${data.var}/update/:id${data.type}" component={${update.type}} />
                <Route path="/${data.var}/detail/:id${data.type}" component={${detail.type}} />
                <Route path="/${data.var}/remove/:id${data.type}" component={${remove.type}} />
                <Route path="/${data.var}/inbox/:id${data.type}" component={${inbox.type}} />
                <Route path="/${data.var}" component={${inbox.type}} />
            </Switch>
        </Panel>
    );
}
export {
    ${inbox.type},
    ${create.type},
    ${update.type},
    ${detail.type},
    ${remove.type}
};

]]></file>
    <% } %>
</files>
