<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    //Common Names
    def page    = fn.createReactPage(entity.clazz)
    //Specific Names
    def inbox  = fn.createReactPage(entity.clazz, 'Inbox')
    def create = fn.createReactPage(entity.clazz, 'Create')
    def update = fn.createReactPage(entity.clazz, 'Update')
    def remove = fn.createReactPage(entity.clazz, 'Remove')
    def detail = fn.createReactPage(entity.clazz, 'Detail')
    def model  = fn.createReactModel(entity.clazz)
    def part   = fn.createReactPart(entity.clazz)
    def rest   = fn.createReactRest(entity.clazz)
    

    def attr    = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${inbox.name}.tsx" layer="view:domain" dir="${inbox.path}"><![CDATA[import React from "react";

import { Panel, Action, Button } from "ui-fast";
import { FilterTextState, TableConfig } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${rest.filter} } from "../${rest.name}";
import { ${model.data}, ${model.filter} } from "../${model.name}";
import { ${part.table}, ${part.query} } from "../${part.name}";

export interface ${inbox.props} extends RouteComponentProps {
    hide?: boolean
}

interface ${inbox.state} {
    filter: ${model.filter};
    values: Array<${model.data}>;
    select?: ${model.data};
}

class ${inbox.local} extends React.Component<${inbox.props}, ${inbox.state}> {

    constructor(props: ${inbox.props}) {
        super(props);
        this.state = {
            filter: {},
            values: [],
            select: undefined
        };
        this.onSelect = this.onSelect.bind(this);
        this.onFilter = this.onFilter.bind(this);
        this.onConfig = this.onConfig.bind(this);
        this.filterClick = this.filterClick.bind(this);
        this.filterClick("apply");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return null;
        }
        let { history } = this.props;
        let { onFilter, filterClick, onConfig, onSelect } = this;
        let { filter, values, select } = this.state;
        let id = select ? select.id : '#ID#';
        let config = Object.assign({}, filter.config);
        let disabled = !select;
        return (
            <Panel>
                <title>Listado de ${model.text}s</title>
                <${part.query} value={filter}
                    onChange={onFilter} />
                <Action>
                    <Button name="apply"
                        onClick={filterClick}
                        icon="filter"
                        variant="primary"
                        text="Buscar" />
                    <Button name="clean"
                        onClick={filterClick}
                        icon="eraser"
                        variant="secondary"
                        text="Limpiar" />
                    <Button name="open"
                        to="/${create.url}"
                        history={history}
                        icon="plus-circle"
                        variant="success"
                        text="Crear" />
                    <Button name="open"
                        to={"/${update.url}/" + id}
                        history={history}
                        icon="pencil"
                        disabled={disabled}
                        variant="primary"
                        text="Modificar" />
                    <Button name="open"
                        to={"/${detail.url}/" + id}
                        history={history}
                        icon="eye"
                        disabled={disabled}
                        variant="primary"
                        text="Detalle" />
                    <Button name="open"
                        to={"/${remove.url}/" + id}
                        history={history}
                        icon="trash"
                        disabled={disabled}
                        variant="danger"
                        text="Eliminar" />
                </Action>
                <${part.table} values={values}
                    select={select}
                    config={config}
                    onSelect={onSelect}
                    onConfig={onConfig} />
            </Panel>
        );
    }

    onFilter(state: FilterTextState) {
        let filter: any = Object.assign({}, this.state.filter);
        filter[state.name] = { operator: state.operator, value: state.value };
        this.setState({ filter });
    }

    onSelect(value: ${model.data}) {
        let select = this.state.select === value ? undefined : value;
        this.setState({ select });
    }

    onConfig(value: TableConfig) {
        let filter = { ...this.state.filter };
        let config = filter.config || {};
        filter.config = Object.assign(config, value);
        this.setState({ filter }, () => {
            this.filterClick("sort");
        });
    }

    filterClick(name: string) {
        let filter = { ...this.state.filter };
        if (name === "clean") {
            filter = { config: filter.config };
            this.setState({
                select: undefined
            });
        }
        ${rest.filter}(filter, (values: Array<${model.data}>) => {
            this.setState({ values, filter });
        }, () => {
            this.setState({ values: [], filter });
        });
    }
}

export const ${inbox.name} = withRouter(${inbox.local});
]]></file>
    <file name="${create.name}.tsx" layer="view:domain" dir="${create.path}"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextState, InputTextValidate } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${model.data}, ${model.message}, ${model.validate} } from "../${model.name}";
import { ${rest.create} } from "../${rest.name}";
import { ${part.form} } from "../${part.name}";
import { isRequired } from "../../Validate";

export interface ${create.props} extends RouteComponentProps {
    hide?: boolean,
}

interface ${create.state} {
    message: ${model.message};
    ${data.var}: ${data.type};
}

class ${create.local} extends React.PureComponent<${create.props}, ${create.state}> {

    private validate: ${model.validate} = {<% attr.each{  %>
        ${it.var}: [isRequired],<% } %>
    }

    constructor(props: ${create.props}) {
        super(props);
        this.state = {
            message: {},
            ${data.var}: {}
        };
        this.onValue = this.onValue.bind(this);
        this.refuseMessage = this.refuseMessage.bind(this);
        this.createClick = this.createClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(state: InputTextState) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let message: any = Object.assign({}, this.state.message);
        ${model.data}[state.name] = state.value;
        message[state.name] = state.message;
        this.setState({ ${data.var}, message });
    }

    refuseMessage(): string {
        let { ${data.var}, message } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.var} no es valido!";
        }
        let other: any = ${data.var} || {};
        let attrs = Object.keys(validate);
        let states: InputTextState[] = attrs.map(attr => { return { name: attr, state: "none", value: other[attr] } });
        states.map(state => {
            let fnVals: Array<InputTextValidate> = validate[state.name];
            if (fnVals) {
                fnVals.every(fnVal => {
                    state = fnVal(state)
                    return state.state === "none";
                });
            }
            return state;
        }).filter(it => it && it.state !== "none")
            .forEach(it => { message[it.name] = { message: it.message, type: it.state, icon: "warning" } });
        if (Object.keys(message).filter(it => message[it]).length > 0) {
            this.setState({ message }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o mÃ¡s errores.";
        }
        return "";
    }

    createClick() {
        let value = this.state.${data.var} || {};
        ${rest.create}(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var}, message } = this.state;
        let { createClick, cancelClick, refuseMessage, onValue, validate } = this;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Crear Nuevo ${data.type}</title>
                <${part.form} value={${data.var}} onValue={onValue} message={message} validate={validate} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={createClick}
                            text="Guardar"
                            icon="check-circle"
                            variant="primary"
                            refuse={refuseMessage}
                            confirm="Esta seguro de crear el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${page.create} = withRouter(${create.local});

]]></file>
    <% } %>
</files>
