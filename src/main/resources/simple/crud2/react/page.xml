<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def pkg    = fn.pkg(groupId, artifactId, module);  
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def message = fn.deduceName(entity.clazz, 'Message')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def viewCtrl = fn.deduceName(entity.clazz, '-ctrl')
    def viewPart = fn.deduceName(entity.clazz, '-part')
    def viewServ = fn.deduceName(entity.clazz, '-serv')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${data.type}Inbox.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[import React from "react";

import { Panel, Action, Button } from "ui-fast";
import { FilterTextState, TableConfig } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.var}Filter } from "../${data.type}Rest";
import { ${data.type}, ${data.type}Filter } from "../${data.type}Model";
import { ${data.type}Table, ${data.type}Query } from "../${data.type}Part";

export interface ${data.type}InboxProps extends RouteComponentProps {
    hide?: boolean
}

interface ${data.type}InboxState {
    filter: ${data.type}Filter;
    values: Array<${data.type}>;
    select?: ${data.type};
}

class ${data.type}InboxLocal extends React.Component<${data.type}InboxProps, ${data.type}InboxState> {

    constructor(props: ${data.type}InboxProps) {
        super(props);
        this.state = {
            filter: {},
            values: [],
            select: undefined
        };
        this.onSelect = this.onSelect.bind(this);
        this.onFilter = this.onFilter.bind(this);
        this.onConfig = this.onConfig.bind(this);
        this.filterClick = this.filterClick.bind(this);
        this.filterClick("apply");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return null;
        }
        let { history } = this.props;
        let { onFilter, filterClick, onConfig, onSelect } = this;
        let { filter, values, select } = this.state;
        let id = select ? select.id : '#ID#';
        let config = Object.assign({}, filter.config);
        let disabled = !select;
        return (
            <Panel>
                <title>Listado de ${data.type}s</title>
                <${data.type}Query value={filter}
                    onChange={onFilter} />
                <Action>
                    <Button name="apply"
                        onClick={filterClick}
                        icon="filter"
                        variant="primary"
                        text="Buscar" />
                    <Button name="clean"
                        onClick={filterClick}
                        icon="eraser"
                        variant="secondary"
                        text="Limpiar" />
                    <Button name="open"
                        to="/${data.var}/create"
                        history={history}
                        icon="plus-circle"
                        variant="success"
                        text="Crear" />
                    <Button name="open"
                        to={"/${data.var}/update/" + id}
                        history={history}
                        icon="pencil"
                        disabled={disabled}
                        variant="primary"
                        text="Modificar" />
                    <Button name="open"
                        to={"/${data.var}/detail/" + id}
                        history={history}
                        icon="eye"
                        disabled={disabled}
                        variant="primary"
                        text="Detalle" />
                    <Button name="open"
                        to={"/${data.var}/remove/" + id}
                        history={history}
                        icon="trash"
                        disabled={disabled}
                        variant="danger"
                        text="Eliminar" />
                </Action>
                <${data.type}Table values={values}
                    select={select}
                    config={config}
                    onSelect={onSelect}
                    onConfig={onConfig} />
            </Panel>
        );
    }

    onFilter(state: FilterTextState) {
        let filter: any = Object.assign({}, this.state.filter);
        filter[state.name] = { operator: state.operator, value: state.value };
        this.setState({ filter });
    }

    onSelect(value: ${data.type}) {
        let select = this.state.select === value ? undefined : value;
        this.setState({ select });
    }

    onConfig(value: TableConfig) {
        let filter = { ...this.state.filter };
        let config = filter.config || {};
        filter.config = Object.assign(config, value);
        this.setState({ filter }, () => {
            this.filterClick("sort");
        });
    }

    filterClick(name: string) {
        let filter = { ...this.state.filter };
        if (name === "clean") {
            filter = { config: filter.config };
            this.setState({
                select: undefined
            });
        }
        ${data.var}Filter(filter, (values: Array<${data.type}>) => {
            this.setState({ values, filter });
        }, () => {
            this.setState({ values: [], filter });
        });
    }
}

export const ${data.type}Inbox = withRouter(${data.type}InboxLocal);
]]></file>
    <file name="${data.type}Create.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextState, InputTextValidate } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Create } from "../${data.type}Rest";
import { ${data.type}Form } from "../${data.type}Part";
import { isRequired } from "../../Validate";

export interface ${data.type}CreateProps extends RouteComponentProps {
    hide?: boolean,
}

interface ${data.type}CreateState {
    message: ${data.type}Message;
    ${data.var}: ${data.type};
}

class ${data.type}CreateLocal extends React.PureComponent<${data.type}CreateProps, ${data.type}CreateState> {

    private validate: ${data.type}Validate = {<% attr.each{  %>
        ${it.var}: [isRequired],<% } %>
    }

    constructor(props: ${data.type}CreateProps) {
        super(props);
        this.state = {
            message: {},
            ${data.var}: {}
        };
        this.onValue = this.onValue.bind(this);
        this.refuseMessage = this.refuseMessage.bind(this);
        this.createClick = this.createClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(state: InputTextState) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let message: any = Object.assign({}, this.state.message);
        ${data.var}[state.name] = state.value;
        message[state.name] = state.message;
        this.setState({ ${data.var}, message });
    }

    refuseMessage(): string {
        let { ${data.var}, message } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.var} no es valido!";
        }
        let other: any = ${data.var} || {};
        let attrs = Object.keys(validate);
        let states: InputTextState[] = attrs.map(attr => { return { name: attr, state: "none", value: other[attr] } });
        states.map(state => {
            let fnVals: Array<InputTextValidate> = validate[state.name];
            if (fnVals) {
                fnVals.every(fnVal => {
                    state = fnVal(state)
                    return state.state === "none";
                });
            }
            return state;
        }).filter(it => it && it.state !== "none")
            .forEach(it => { message[it.name] = { message: it.message, type: it.state, icon: "warning" } });
        if (Object.keys(message).filter(it => message[it]).length > 0) {
            this.setState({ message }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o mÃ¡s errores.";
        }
        return "";
    }

    createClick() {
        let value = this.state.${data.var} || {};
        ${data.var}Create(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var}, message } = this.state;
        let { createClick, cancelClick, refuseMessage, onValue, validate } = this;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Crear Nuevo ${data.type}</title>
                <${data.type}Form value={${data.var}} onValue={onValue} message={message} validate={validate} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={createClick}
                            text="Guardar"
                            icon="check-circle"
                            variant="primary"
                            refuse={refuseMessage}
                            confirm="Esta seguro de crear el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${data.type}Create = withRouter(${data.type}CreateLocal);

]]></file>
    <file name="${data.type}Update.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextState, InputTextValidate } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";
import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Reload, ${data.var}Update } from "../${data.type}Rest";
import { ${data.type}Form } from "../${data.type}Part";
import { isRequired } from "../../Validate";

export interface ${data.type}UpdateProps extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}
        
interface ${data.type}UpdateState {
    message: ${data.type}Message;
    ${data.var}?: ${data.type};
}

class ${data.type}UpdateLocal extends React.PureComponent<${data.type}UpdateProps, ${data.type}UpdateState> {

    private validate: ${data.type}Validate = {<% attr.each{  %>
        ${it.var}: [isRequired],<% } %>
    }

    constructor(props: ${data.type}UpdateProps) {
        super(props);
        this.state = {
            message: {},
            ${data.var}: undefined
        };
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.onValue = this.onValue.bind(this);
        this.refuseMessage = this.refuseMessage.bind(this);
        this.updateClick = this.updateClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(state: InputTextState) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let message: any = Object.assign({}, this.state.message);
        ${data.var}[state.name] = state.value;
        message[state.name] = state.message;
        this.setState({ ${data.var}, message });
    }

    refuseMessage(): string {
        let { ${data.var}, message } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.text} no es valido!";
        }
        let other: any = ${data.var} || {};
        let attrs = Object.keys(validate);
        let states: InputTextState[] = attrs.map(attr => { return { name: attr, state: "none", value: other[attr] } });
        states.map(state => {
            let fnVals: Array<InputTextValidate> = validate[state.name];
            if (fnVals) {
                fnVals.every(fnVal => {
                    state = fnVal(state)
                    return state.state === "none";
                });
            }
            return state;
        }).filter(it => it && it.state !== "none")
            .forEach(it => { message[it.name] = { message: it.message, type: it.state, icon: "warning" } });
        if (Object.keys(message).filter(it => message[it]).length > 0) {
            this.setState({ message }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o mÃ¡s errores.";
        }
        return "";
    }

    updateClick() {
        let value = this.state.${data.var} || {};
        ${data.var}Update(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var}, message } = this.state;
        let { updateClick, cancelClick, refuseMessage, onValue, validate } = this;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Modificar ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}Form value={${data.var}}
                    onValue={onValue}
                    message={message}
                    validate={validate} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={updateClick}
                            text="Guardar"
                            icon="check-circle"
                            variant="primary"
                            refuse={refuseMessage}
                            confirm="Esta seguro de actualizar el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${data.type}Update = withRouter(${data.type}UpdateLocal);
]]></file>
    <file name="${data.type}Detail.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.type} } from "../${data.type}Model";
import { ${data.var}Reload } from "../${data.type}Rest";
import { ${data.type}View } from "../${data.type}Part";

export interface ${data.type}DetailProps extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}

interface ${data.type}DetailState {
    ${data.var}?: ${data.type};
}

class ${data.type}DetailLocal extends React.PureComponent<${data.type}DetailProps, ${data.type}DetailState> {
    constructor(props: ${data.type}DetailProps) {
        super(props);
        this.state = {};
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.cancelClick = this.cancelClick.bind(this);
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { cancelClick } = this;
        let { ${data.var} } = this.state;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Detalle ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}View value={${data.var}} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${data.type}Detail = withRouter(${data.type}DetailLocal);

]]></file>
    <file name="${data.type}Remove.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.type} } from "../${data.type}Model";
import { ${data.var}Reload, ${data.var}Remove } from "../${data.type}Rest";
import { ${data.type}View } from "../${data.type}Part";

export interface ${data.type}RemoveProps extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}

interface ${data.type}RemoveState {
    ${data.var}?: ${data.type};
}

class ${data.type}RemoveLocal extends React.PureComponent<${data.type}RemoveProps, ${data.type}RemoveState> {

    constructor(props: ${data.type}RemoveProps) {
        super(props);
        this.state = {};
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.removeClick = this.removeClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    removeClick() {
        let value = this.state.${data.var} || {};
        ${data.var}Remove(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }


    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var} } = this.state;
        let { cancelClick, removeClick } = this;
        return (
            <Panel icon="pencil"
                variant="warning"
                width="50">
                <title>Eliminacion ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}View value={${data.var}} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={removeClick}
                            text="Eliminar"
                            icon="check-circle"
                            variant="danger"
                            confirm="Esta seguro de eliminar el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${data.type}Remove = withRouter(${data.type}RemoveLocal);

]]></file>
    <file name="${data.type}Search.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";

import { Panel, Action, Button } from "ui-fast";
import { FilterTextState, TableConfig } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.var}Filter } from "../${data.type}Rest";
import { ${data.type}, ${data.type}Filter } from "../${data.type}Model";
import { ${data.type}Table, ${data.type}Query } from "../${data.type}Part";

export interface ${data.type}SearchProps extends RouteComponentProps {
    hide?: boolean,
    selectClick: (${data.var}: ${data.type}) => void,
    cancelClick: () => void
}

interface ${data.type}SearchState {
    filter: ${data.type}Filter;
    values: Array<${data.type}>;
    select?: ${data.type};
}

class ${data.type}SearchLocal extends React.Component<${data.type}SearchProps, ${data.type}SearchState> {

    constructor(props: ${data.type}SearchProps) {
        super(props);
        this.state = {
            filter: {},
            values: [],
            select: undefined
        };
        this.onSelect = this.onSelect.bind(this);
        this.onFilter = this.onFilter.bind(this);
        this.onConfig = this.onConfig.bind(this);
        this.filterClick = this.filterClick.bind(this);
        this.selectClickInvoke = this.selectClickInvoke.bind(this);
        this.cancelClickInvoke = this.cancelClickInvoke.bind(this);
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return null;
        }
        let { onFilter, filterClick, onConfig, onSelect, cancelClickInvoke, selectClickInvoke } = this;
        let { filter, values, select } = this.state;
        let config = Object.assign({}, filter.config);
        let disabled = !select;
        return (
            <Panel mode="modal" width="80" variant="primary">
                <header>Buscar ${data.type}</header>
                <${data.type}Query value={filter}
                    onChange={onFilter} />
                <Action>
                    <Button name="apply"
                        onClick={filterClick}
                        icon="filter"
                        variant="primary"
                        text="Buscar" />
                    <Button name="clean"
                        onClick={filterClick}
                        icon="eraser"
                        variant="secondary"
                        text="Limpiar" />
                    <Button name="open"
                        icon="check"
                        disabled={disabled}
                        onClick={selectClickInvoke}
                        variant="primary"
                        text="Aceptar" />
                    <Button name="open"
                        icon="trash"
                        onClick={cancelClickInvoke}
                        variant="danger"
                        text="Cancelar" />
                </Action>
                <${data.type}Table values={values}
                    select={select}
                    config={config}
                    onSelect={onSelect}
                    onConfig={onConfig} />
            </Panel>
        );
    }

    selectClickInvoke() {
        let { selectClick } = this.props;
        let { select } = this.state;
        if (selectClick && select) {
            selectClick(select);
        }
    }

    cancelClickInvoke() {
        let { cancelClick } = this.props;
        if (cancelClick) {
            cancelClick();
        }
    }

    onFilter(state: FilterTextState) {
        let filter: any = Object.assign({}, this.state.filter);
        filter[state.name] = { operator: state.operator, value: state.value };
        this.setState({ filter });
    }

    onSelect(value: ${data.type}) {
        let select = this.state.select === value ? undefined : value;
        this.setState({ select });
    }

    onConfig(value: TableConfig) {
        let filter = { ...this.state.filter };
        let config = filter.config || {};
        filter.config = Object.assign(config, value);
        this.setState({ filter }, () => {
            this.filterClick("sort");
        });
    }

    filterClick(name: string) {
        let filter = { ...this.state.filter };
        if (name === "clean") {
            filter = { config: filter.config };
        }
        ${data.var}Filter(filter, (values: Array<${data.type}>) => {
            this.setState({ values, filter, select: undefined });
        }, () => {
            this.setState({ values: [], filter, select: undefined });
        });
    }
}

export const ${data.type}Search = withRouter(${data.type}SearchLocal);

]]></file>
    <file name="${data.type}CRUD.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextValidate, InputTextState } from "ui-fast";

import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Create, ${data.var}Remove, ${data.var}Update } from "../${data.type}Rest";
import { ${data.type}Form, ${data.type}View } from "../${data.type}Part";
import { isRequired } from "../../Validate";

type StateType = "CREATE" | "UPDATE" | "REMOVE" | "ERROR";
export interface ${data.type}CRUDEvent {
    state: StateType;
    index: number;
    ${data.var}: ${data.type};
}

interface ${data.type}CRUDState {
    message: ${data.type}Message,
    backup: ${data.type},
    ${data.var}: ${data.type},
    state: "NEW" | "EDIT" | "SAVE",
}

export interface ${data.type}CRUDProps {
    index: number,
    ${data.var}: ${data.type},
    allowUpdate?: boolean,
    allowRemove?: boolean,
    eventListener?: (event: ${data.type}CRUDEvent) => void
}

export class ${data.type}CRUD extends React.PureComponent<${data.type}CRUDProps, ${data.type}CRUDState> {

    private validate: ${data.type}Validate = {<% attr.each{  %>
        ${it.var}: [isRequired],<% } %>
    }

    constructor(props: ${data.type}CRUDProps) {
        super(props);
        let ${data.var} = props.${data.var};
        this.state = {
            message: {},
            ${data.var}: ${data.var},
            backup: ${data.var},
            state: ${data.var}.id ? "SAVE" : "NEW"
        };
        this.onValue = this.onValue.bind(this);
        this.refuseMessage = this.refuseMessage.bind(this);
        this.editClick = this.editClick.bind(this);
        this.createClick = this.createClick.bind(this);
        this.updateClick = this.updateClick.bind(this);
        this.removeClick = this.removeClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(state: InputTextState) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let message: any = Object.assign({}, this.state.message);
        ${data.var}[state.name] = state.value;
        message[state.name] = state.message;
        this.setState({ ${data.var}, message });
    }

    createClick() {
        let { ${data.var}, state } = this.state;
        if (state === "NEW") {
            ${data.var}Create(${data.var}, (data) => {
                state = "SAVE";
                ${data.var} = data;
                this.setState({ state, ${data.var} });
                this.eventListener("CREATE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        }
    }

    updateClick() {
        let { ${data.var}, state } = this.state;
        if (state === "EDIT") {
            ${data.var}Update(${data.var}, (data) => {
                state = "SAVE";
                ${data.var} = data;
                this.setState({ state, ${data.var} });
                this.eventListener("UPDATE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        }
    }

    removeClick() {
        let { ${data.var}, state } = this.state;
        if (state !== "NEW") {
            ${data.var}Remove(${data.var}, (data) => {
                ${data.var} = data;
                this.eventListener("REMOVE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        } else {
            this.eventListener("REMOVE", ${data.var});
        }
    }

    eventListener(state: StateType, ${data.var}: ${data.type}) {
        let { eventListener, index } = this.props;
        let event: ${data.type}CRUDEvent = {
            state: state,
            ${data.var}: ${data.var},
            index: index
        };
        if (eventListener) {
            eventListener(event);
        }
    }

    editClick() {
        let { ${data.var} } = this.state;
        this.setState({ backup: ${data.var}, state: "EDIT" });
    }

    cancelClick() {
        let { backup } = this.state;
        this.setState({ ${data.var}: backup, state: "SAVE" });
    }

    refuseMessage(): string {
        let { ${data.var}, message } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.var} no es valido!";
        }
        let other: any = ${data.var} || {};
        let attrs = Object.keys(validate);
        let states: InputTextState[] = attrs.map(attr => { return { name: attr, state: "none", value: other[attr] } });
        states.map(state => {
            let fnVals: Array<InputTextValidate> = validate[state.name];
            if (fnVals) {
                fnVals.every(fnVal => {
                    state = fnVal(state)
                    return state.state === "none";
                });
            }
            return state;
        }).filter(it => it && it.state !== "none")
            .forEach(it => { message[it.name] = { message: it.message, type: it.state, icon: "warning" } });
        if (Object.keys(message).filter(it => message[it]).length > 0) {
            this.setState({ message }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o mÃ¡s errores.";
        }
        return "";
    }

    render(): React.ReactNode {
        let { state, ${data.var}, message } = this.state;
        let { editClick, cancelClick, createClick, updateClick, removeClick, onValue, validate, refuseMessage } = this;
        let { allowRemove, allowUpdate } = this.props;
        let id${data.type} = ${data.var} ? ${data.var}.id : "?";
        return (
            state === "SAVE" ?
                <Panel>
                    <title>Edicion ${data.type} <sub>{id${data.type}}</sub> </title>
                    <${data.type}View value={${data.var}} />
                    <Action>
                        <Button name="apply"
                            text="Eliminar"
                            hide={!allowRemove}
                            onClick={removeClick}
                            icon="trash"
                            variant="danger"
                            confirm="Esta seguro de eliminar el registro?" />
                        <Button name="apply"
                            text="Editar"
                            hide={!allowUpdate}
                            onClick={editClick}
                            icon="pencil"
                            variant="primary" />
                    </Action>
                </Panel>
                :
                state === "NEW" ?
                    <Panel>
                        <title>Registro ${data.type}</title>
                        <${data.type}Form value={${data.var}}
                            onValue={onValue}
                            message={message}
                            validate={validate} />
                        <Action>
                            <Button name="apply"
                                text="Cancelar"
                                onClick={removeClick}
                                icon="arrow-circle-left"
                                variant="warning" />
                            <Button name="apply"
                                text="Guardar"
                                hide={state !== "NEW"}
                                onClick={createClick}
                                icon="check-circle"
                                variant="primary"
                                refuse={refuseMessage}
                                confirm="Esta seguro de crear el registro?" />
                        </Action>
                    </Panel>
                    :
                    <Panel>
                        <title>Edicion ${data.type} <sub>{id${data.type}}</sub> </title>
                        <${data.type}Form value={${data.var}}
                            onValue={onValue}
                            message={message}
                            validate={validate} />
                        <Action>
                            <Button name="apply"
                                text="Cancelar"
                                onClick={cancelClick}
                                icon="arrow-circle-left"
                                variant="warning" />
                            <Button name="apply"
                                text="Actualizar"
                                hide={state !== "EDIT"}
                                onClick={updateClick}
                                icon="check-circle"
                                variant="primary"
                                refuse={refuseMessage}
                                confirm="Esta seguro de actualizar el registro?" />
                        </Action>
                    </Panel>
        );
    };
}
]]></file>
    <file name="${data.type}Proc01.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
//ejemplo 1
]]></file>
    <file name="${data.type}Page.tsx" layer="view:domain" dir="${data.path}"><![CDATA[

import React from "react";
import { Panel, Button } from "ui-fast";
import { Route, Switch } from "react-router-dom";
import { ${data.type}Inbox } from "./page/${data.type}Inbox";
import { ${data.type}Create } from "./page/${data.type}Create";
import { ${data.type}Update } from "./page/${data.type}Update";
import { ${data.type}Detail } from "./page/${data.type}Detail";
import { ${data.type}Remove } from "./page/${data.type}Remove";
import { ${data.type}Search } from "./page/${data.type}Search";
import { ${data.type}Proc01 } from "./page/${data.type}Proc01";
import { ${data.var}Ping } from "./${rest.type}";

export const ${data.type}Manager: React.SFC = () => {

    let pingClick = function (name: string) {
        ${data.var}Ping();
    }

    return (
        <Panel>
            <header>
                <Button name="apply"
                    onClick={pingClick}
                    icon="bell"
                    variant="primary"
                    mode="link" />
                Administracion de ${data.type}(s)
            </header>
            <Switch>
                <Route path="/${data.var}/search" component={${data.type}Search} />
                <Route path="/${data.var}/proc01" component={${data.type}Proc01} />
                <Route path="/${data.var}/create" component={${data.type}Create} />
                <Route path="/${data.var}/update/:id${data.type}" component={${data.type}Update} />
                <Route path="/${data.var}/detail/:id${data.type}" component={${data.type}Detail} />
                <Route path="/${data.var}/remove/:id${data.type}" component={${data.type}Remove} />
                <Route path="/${data.var}/inbox/:id${data.type}" component={${data.type}Inbox} />
                <Route path="/${data.var}" component={${data.type}Inbox} />
            </Switch>
        </Panel>
    );
}
export {
    ${data.type}Inbox,
    ${data.type}Create,
    ${data.type}Update,
    ${data.type}Detail,
    ${data.type}Remove
};

]]></file>
    <% } %>
</files>
