<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def pkg    = fn.pkg(groupId, artifactId, module);  
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def message = fn.deduceName(entity.clazz, 'Message')
    def crud    = fn.deduceName(entity.clazz, 'CRUD')
    def inbox   = fn.deduceName(entity.clazz, 'Inbox')
    def create  = fn.deduceName(entity.clazz, 'Create')
    def update  = fn.deduceName(entity.clazz, 'Update')
    def remove  = fn.deduceName(entity.clazz, 'Remove')
    def detail  = fn.deduceName(entity.clazz, 'Detail')
    def search  = fn.deduceName(entity.clazz, 'Search')
    def proc01 = fn.deduceName(entity.clazz, 'Proc01')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${crud.type}.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextValidate, InputTextState } from "ui-fast";

import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Create, ${data.var}Remove, ${data.var}Update } from "../${data.type}Rest";
import { ${data.type}Form, ${data.type}View } from "../${data.type}Part";
import { isRequired } from "../../Validate";

type StateType = "CREATE" | "UPDATE" | "REMOVE" | "ERROR";
export interface ${crud.type}Event {
    state: StateType;
    index: number;
    ${data.var}: ${data.type};
}

interface ${crud.type}State {
    message: ${data.type}Message,
    backup: ${data.type},
    ${data.var}: ${data.type},
    state: "NEW" | "EDIT" | "SAVE",
}

export interface ${crud.type}Props {
    index: number,
    ${data.var}: ${data.type},
    allowUpdate?: boolean,
    allowRemove?: boolean,
    eventListener?: (event: ${crud.type}Event) => void
}

export class ${crud.type} extends React.PureComponent<${crud.type}Props, ${crud.type}State> {

    private validate: ${data.type}Validate = {<% attr.each{  %>
        ${it.var}: [isRequired],<% } %>
    }

    constructor(props: ${crud.type}Props) {
        super(props);
        let ${data.var} = props.${data.var};
        this.state = {
            message: {},
            ${data.var}: ${data.var},
            backup: ${data.var},
            state: ${data.var}.id ? "SAVE" : "NEW"
        };
        this.onValue = this.onValue.bind(this);
        this.refuseMessage = this.refuseMessage.bind(this);
        this.editClick = this.editClick.bind(this);
        this.createClick = this.createClick.bind(this);
        this.updateClick = this.updateClick.bind(this);
        this.removeClick = this.removeClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(state: InputTextState) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let message: any = Object.assign({}, this.state.message);
        ${data.var}[state.name] = state.value;
        message[state.name] = state.message;
        this.setState({ ${data.var}, message });
    }

    createClick() {
        let { ${data.var}, state } = this.state;
        if (state === "NEW") {
            ${data.var}Create(${data.var}, (data) => {
                state = "SAVE";
                ${data.var} = data;
                this.setState({ state, ${data.var} });
                this.eventListener("CREATE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        }
    }

    updateClick() {
        let { ${data.var}, state } = this.state;
        if (state === "EDIT") {
            ${data.var}Update(${data.var}, (data) => {
                state = "SAVE";
                ${data.var} = data;
                this.setState({ state, ${data.var} });
                this.eventListener("UPDATE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        }
    }

    removeClick() {
        let { ${data.var}, state } = this.state;
        if (state !== "NEW") {
            ${data.var}Remove(${data.var}, (data) => {
                ${data.var} = data;
                this.eventListener("REMOVE", ${data.var});
            }, () => {
                this.eventListener("ERROR", ${data.var});
            });
        } else {
            this.eventListener("REMOVE", ${data.var});
        }
    }

    eventListener(state: StateType, ${data.var}: ${data.type}) {
        let { eventListener, index } = this.props;
        let event: ${crud.type}Event = {
            state: state,
            ${data.var}: ${data.var},
            index: index
        };
        if (eventListener) {
            eventListener(event);
        }
    }

    editClick() {
        let { ${data.var} } = this.state;
        this.setState({ backup: ${data.var}, state: "EDIT" });
    }

    cancelClick() {
        let { backup } = this.state;
        this.setState({ ${data.var}: backup, state: "SAVE" });
    }

    refuseMessage(): string {
        let { ${data.var}, message } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.var} no es valido!";
        }
        let other: any = ${data.var} || {};
        let attrs = Object.keys(validate);
        let states: InputTextState[] = attrs.map(attr => { return { name: attr, state: "none", value: other[attr] } });
        states.map(state => {
            let fnVals: Array<InputTextValidate> = validate[state.name];
            if (fnVals) {
                fnVals.every(fnVal => {
                    state = fnVal(state)
                    return state.state === "none";
                });
            }
            return state;
        }).filter(it => it && it.state !== "none")
            .forEach(it => { message[it.name] = { message: it.message, type: it.state, icon: "warning" } });
        if (Object.keys(message).filter(it => message[it]).length > 0) {
            this.setState({ message }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o m√°s errores.";
        }
        return "";
    }

    render(): React.ReactNode {
        let { state, ${data.var}, message } = this.state;
        let { editClick, cancelClick, createClick, updateClick, removeClick, onValue, validate, refuseMessage } = this;
        let { allowRemove, allowUpdate } = this.props;
        let id${data.type} = ${data.var} ? ${data.var}.id : "?";
        return (
            state === "SAVE" ?
                <Panel>
                    <title>Edicion ${data.type} <sub>{id${data.type}}</sub> </title>
                    <${data.type}View value={${data.var}} />
                    <Action>
                        <Button name="apply"
                            text="Eliminar"
                            hide={!allowRemove}
                            onClick={removeClick}
                            icon="trash"
                            variant="danger"
                            confirm="Esta seguro de eliminar el registro?" />
                        <Button name="apply"
                            text="Editar"
                            hide={!allowUpdate}
                            onClick={editClick}
                            icon="pencil"
                            variant="primary" />
                    </Action>
                </Panel>
                :
                state === "NEW" ?
                    <Panel>
                        <title>Registro ${data.type}</title>
                        <${data.type}Form value={${data.var}}
                            onValue={onValue}
                            message={message}
                            validate={validate} />
                        <Action>
                            <Button name="apply"
                                text="Cancelar"
                                onClick={removeClick}
                                icon="arrow-circle-left"
                                variant="warning" />
                            <Button name="apply"
                                text="Guardar"
                                hide={state !== "NEW"}
                                onClick={createClick}
                                icon="check-circle"
                                variant="primary"
                                refuse={refuseMessage}
                                confirm="Esta seguro de crear el registro?" />
                        </Action>
                    </Panel>
                    :
                    <Panel>
                        <title>Edicion ${data.type} <sub>{id${data.type}}</sub> </title>
                        <${data.type}Form value={${data.var}}
                            onValue={onValue}
                            message={message}
                            validate={validate} />
                        <Action>
                            <Button name="apply"
                                text="Cancelar"
                                onClick={cancelClick}
                                icon="arrow-circle-left"
                                variant="warning" />
                            <Button name="apply"
                                text="Actualizar"
                                hide={state !== "EDIT"}
                                onClick={updateClick}
                                icon="check-circle"
                                variant="primary"
                                refuse={refuseMessage}
                                confirm="Esta seguro de actualizar el registro?" />
                        </Action>
                    </Panel>
        );
    };
}
]]></file>
    <file name="${proc01.type}.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import Help, { Panel, Increase } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${crud.type}, ${crud.type}Event } from "./${crud.type}";
import { ${data.type} } from "../${data.type}Model";
import { ${data.var}Remove, ${data.var}Filter } from "../${data.type}Rest";
export interface ${proc01.type}Props extends RouteComponentProps {
    hide?: boolean,
}

interface ${proc01.type}State {
    values: Array<${data.type}>;
}

class ${proc01.type}Local extends React.PureComponent<${proc01.type}Props, ${proc01.type}State> {

    constructor(props: ${proc01.type}Props) {
        super(props);
        this.state = {
            values: []
        };
        this.${data.var}Append = this.${data.var}Append.bind(this);
        this.${data.var}Remove = this.${data.var}Remove.bind(this);
        this.setValues = this.setValues.bind(this);
        this.eventListener = this.eventListener.bind(this);
        ${data.var}Filter({}, (data) => {
            this.setValues(data);
        });
    }

    ${data.var}Append(index: number) {
        let { values } = this.state;
        values = Help.insertArray(values, index, {});
        this.setValues(values);
    }

    ${data.var}Remove(${data.var}: ${data.type}, index: number) {
        let { values } = this.state;
        if (${data.var}.id) {
            ${data.var}Remove(${data.var}, () => {
                values = values.filter(it => it !== ${data.var});
                this.setValues(values);
            });
        } else {
            values = values.filter(it => it !== ${data.var});
            this.setValues(values);
        }
    }

    eventListener(event: ${crud.type}Event) {
        let { values } = this.state;
        let ${data.var} = values[event.index];
        if (${data.var} && event.state === "REMOVE") {
            values = values.filter(it => it !== ${data.var});
            this.setValues(values);
        } else if (${data.var} && event.state !== "ERROR") {
            values[event.index] = event.${data.var};
            this.setValues(values);
        }
    }

    setValues(values: ${data.type}[]) {
        //force clear
        this.setState({ values: [] }, () => {
            //restore new values
            this.setState({ values: values }, () => {
                //this.forceUpdate();
            });
        });
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { values } = this.state;
        let { ${data.var}Append, ${data.var}Remove, eventListener } = this;
        let ${data.var}Form = (${data.var}: ${data.type}, index: number) => {
            return (
                <${crud.type}
                    ${data.var}={${data.var}}
                    index={index}
                    allowUpdate={true}
                    allowRemove={false}
                    eventListener={eventListener}
                />
            )
        }
        return (
            <Panel icon="pencil" variant="warning" width="90">
                <title>Correos Electronicos</title>
                <Increase values={values}
                    onContent={${data.var}Form}
                    appendMode="row"
                    onAppend={${data.var}Append}
                    onRemove={${data.var}Remove}
                    minimum={0}
                    maximum={5}>
                </Increase>
            </Panel>
        );
    };
}

export const ${proc01.type} = withRouter(${proc01.type}Local);
]]></file>
    <% } %>
</files>
