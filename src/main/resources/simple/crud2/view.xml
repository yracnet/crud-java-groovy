<?xml version="1.0" encoding="UTF-8"?>
<files>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def pkg    = fn.pkg(groupId, artifactId, module);  
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def viewCtrl = fn.deduceName(entity.clazz, '-ctrl')
    def viewPart = fn.deduceName(entity.clazz, '-part')
    def viewServ = fn.deduceName(entity.clazz, '-serv')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${rest.type}.java" layer="view:rest" dir="." pkg="${pkg}" skip="true"><![CDATA[
import bo.gob.bcb.grh.postulate.sitio.data.${data.type};
import bo.gob.bcb.grh.postulate.sitio.data.${filter.type};
import javax.ejb.EJB;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import bo.central.result.ResultSet;
import bo.central.result.ResultObject;
import javax.interceptor.Interceptors;

@Path("${data.path}")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Interceptors ({RestInterceptor.class})
public class ${rest.type} {

    @EJB
    private ${serv.type} serv;

    @GET
    @Path("/")
    public String ping() {
        return "Info Service: " + this + " by " + serv;
    }

    @POST
    @Path("filtrar")
    public ResultSet<${data.type}> filtrar${data.type}(${filter.type} filter) {
        return serv.filtrar${data.type}(filter);
    }

    @POST
    @Path("recargar")
    public ResultObject<${data.type}> recargar${data.type}(${data.type} ${data.var}) {
        return serv.recargar${data.type}(${data.var});
    }

    @POST
    @Path("registrar")
    public ResultObject<${data.type}> registrar${data.type}(${data.type} ${data.var}) {
        return serv.registrar${data.type}(${data.var});
    }

    @POST
    @Path("actualizar")
    public ResultObject<${data.type}> actualizar${data.type}(${data.type} ${data.var}) {
        return serv.actualizar${data.type}(${data.var});
    }

    @POST
    @Path("eliminar")
    public ResultObject<${data.type}> eliminar${data.type}(${data.type} ${data.var}) {
        return serv.eliminar${data.type}(${data.var});
    }
}
]]></file>
    <file name="${viewServ.uscore}.js" layer="view:serv" dir="." skip="false"><![CDATA[
app.service("${viewServ.uscore}", [
    "\$http",
    function (http) {
        function process(caller, success, error) {
            success = success || function(){};
            error = error || function(){};
            caller.then(
                    response => {
                        success(response.data);
                    },
                    response => {
                        error(response.data);
                    }
            );
        }
        return {
            filtrar${data.type}: function (data, success, error) {
                let caller = http.post("/${contextPath}/rest/${data.path}/filtrar", data);
                process(caller, success, error);
            },
            recargar${data.type}: function (data) {
                let caller = http.post("/${contextPath}/rest/${data.path}/recargar", data);
                process(caller, success, error);
            },
            registrar${data.type}: function (data) {
                let caller = http.post("/${contextPath}/rest/${data.path}/registrar", data);
                process(caller, success, error);
            },
            actualizar${data.type}: function (data) {
                let caller = http.post("/${contextPath}/rest/${data.path}/actualizar", data);
                process(caller, success, error);
            },
            eliminar${data.type}: function (data) {
                let caller = http.post("/${contextPath}/rest/${data.path}/eliminar", data);
                process(caller, success, error);
            }
        };
    }
]);
]]></file>
    <file name="${viewPart.uscore}.js" layer="view:part" dir="." skip="false"><![CDATA[
app.directive("${data.var}Form", function() {
  return {
    restrict: "E",
    templateUrl: "/${contextPath}/module/${data.uscore}_form.html",
    transclude: true,
    scope: {
      mode: "=",
      ${data.var}Object: "=",
      ${data.var}Option: "="
    }
  };
});

app.directive("${data.var}Table", function() {
  return {
    restrict: "E",
    templateUrl: "/${contextPath}/module/${data.uscore}_table.html",
    transclude: true,
    scope: {
      mode: "=",
      ${data.var}Values: "=",
      ${data.var}Select: "="
    },
    controller: function(scope) {
      scope.rowClick = function(row) {
        scope.${data.var}Select = row;
      };
    }
  };
});

app.directive("${data.var}Filter", function() {
  return {
    restrict: "E",
    templateUrl: "/${contextPath}/module/${data.uscore}_filter.html",
    transclude: true,
    scope: {
      mode: "=",
      ${data.var}Filter: "="
    }
  };
});
]]></file>
    <file name="${viewCtrl.uscore}.js" layer="view:ctrl" dir="." skip="false"><![CDATA[
app.controller("${viewCtrl.uscore}", [
  "\$scope",
  "${viewServ.uscore}",
  function(scope, service) {
    let data = scope.data = {
        filter: {},
        values: [],
        parent: {},
        select: {},
        object: {}
    };
    scope.filtrar${data.type}Click = function() {
      data.values = [];
      service.filtrar${data.type}(scope.filter, function(value) {
        data.values = value;
      });
    };
    scope.limpiar${data.type}Click = function() {
      data.filter = {};
      scope.filtrar${data.type}Click();
    };
    scope.registrar${data.type}Click = function() {
      service.registrar${data.type}(data.object, function(value) {
        data.object = value;
      });
    };
    scope.actualizar${data.type}Click = function() {
      service.actualizar${data.type}(data.object, function(value) {
        data.object = value;
      });
    };
    scope.eliminar${data.type}Click = function() {
      service.eliminar${data.type}(data.object, function(value) {
        data.object = value;
      });
    };
    scope.init = function() {
      scope.filtrar${data.type}Click();
    };
  }
]);
]]></file>
    <file name="${data.uscore}_table.xhtml" layer="view" dir="." skip="false"><![CDATA[
]]></file>
    <file name="${data.uscore}_filter.xhtml" layer="view" dir="." skip="false"><![CDATA[
]]></file>
    <file name="${data.uscore}_form.xhtml" layer="view" dir="." skip="false"><![CDATA[
]]></file>
    <file name="${data.uscore}.xhtml" layer="view" dir="." skip="false"><![CDATA[
<div ng-controller="${viewCtrl.uscore}">
    <section ng-if="bloqueVisible('inbox')">
        <header>Listado de ${data.text}</header>
        <section
            ${data.colon}-filter = "simple"
            ${data.colon}-object = "data.filter"
            ${data.colon}-option = "data.option">
            Load Block Filter
        </section>
        <div>
            <button ng-click="abrirBloqueClick('create', data.origin)">Crear<button>
            <button ng-click="abrirBloqueClick('update', data.select)">Editar<button>
            <button ng-click="abrirBloqueClick'detail', data.select)">Detalle<button>
            <button ng-click="abrirBloqueClick('delete', data.select)">Eliminar<button>
        </div>
        <section
            ${data.colon}-grid = "simple"
            ${data.colon}-values = "data.values"
            ${data.colon}-select = "data.select">
            Load Block Form
        </section>
    <section>
    <section ng-if="bloqueVisible('create')">
        <header>Registro ${data.text}</header>
        <section
            ${data.colon}-form  = "enabled"
            ${data.colon}-object = "data.object"
            ${data.colon}-option = "data.option">
            Load Block Form
        </section>
        <footer>
            <button ng-click="registrar${data.type}Click()">Guardar<button>
            <button ng-click="cancelar${data.type}Click()">Cancelar<button>
        </footer>
    <section>
    <section ng-if="bloqueVisible('update')">
        <header>Actualizar ${data.text} #<b ng-bind="data.object.id"/></header>
        <section
            ${data.colon}-form  = "enabled"
            ${data.colon}-object = "data.object"
            ${data.colon}-option = "data.option">
            Load Block Form
        </section>
        <footer>
            <button ng-click="actualizar${data.type}Click()">Guardar<button>
            <button ng-click="cancelar${data.type}Click()">Cancelar<button>
        </footer>
    <section>
    <section ng-if="bloqueVisible('detail')">
        <header>Detalle ${data.text} #<b ng-bind="data.object.id"/></header>
        <section
            ${data.colon}-form  = "disabled"
            ${data.colon}-object = "data.object"
            ${data.colon}-option = "data.option">
            Load Block Form
        </section>
        <footer>
            <button ng-click="cancelar${data.type}Click()">Cancelar<button>
        </footer>
    <section>
    <section ng-if="bloqueVisible('remove')">
        <header>Eliminar ${data.text} #<b ng-bind="data.object.id"/></header>
        <section
            ${data.colon}-form  = "disabled"
            ${data.colon}-object = "data.object"
            ${data.colon}-option = "data.option">
            Load Block Form
        </section>
        <footer>
            <button ng-click="eliminar${data.type}Click()">Eliminar<button>
            <button ng-click="cancelar${data.type}Click()">Cancelar<button>
        </footer>
    <section>
</div>
]]></file>
    <% } %>
</files>
