<?xml version="1.0" encoding="UTF-8"?>
<files>
    <file name="Endpoint.tsx" layer="view:domain" dir="." skip="false" append="false"><![CDATA[
import axios, { AxiosResponse } from 'axios';
import { FlashContext, Message } from '../plataforma/Plataforma';
//import { FlashContext, Message } from "bcb-platform";
import { Result } from "./Model";

let defaultSuccess = function (data: any) {
  console.debug("success:", data);
};
let defaultError = function (data: any) {
  console.debug("error:", data);
};
let processMessage = function (result: Result) {
  console.debug('processMessage:', result);
  let message: Array<Message> = result.messages.map(it => ({
    type: it.type || 'info',
    title: 'Respuesta del Servidor',
    description: it.description,
    action: it.action,
    causes: it.causes,
    duration: 5000
  }));
  FlashContext.flashMessage(message);
};

export const endpoint: String = 'http://127.0.0.1:8080/${contextPath}/rest';

export const processCaller = function (caller: Promise<AxiosResponse>, success?: (data: any) => void, error?: (data: any) => void) {
  let callerSuccess = success || defaultSuccess;
  let callerError = error || defaultError;
  caller.then(response => {
    console.debug("Response-Success:", response);
    let result: Result = response.data;
    processMessage(result);
    if (result.error === false) {
      callerSuccess(result.value);
    } else {
      callerError(result);
    }
  }).catch(error => {
    console.debug("Response-Error:", error.toJSON());
    let result: Result = {
      error: true,
      messages: []
    }
    if (error.response && error.response.data) {
      let response = error.response;
      let data = response.data;
      if (typeof data === 'object' && data.messages) {
        result.error = data.error;
        result.value = data.value;
        result.messages = data.messages;
      } else {
        result.messages.push({
          type: "error",
          description: "Error al invocar al servicio",
          causes: [
            "Servicio:  " + error.config.url,
            "Respuesta: " + response.status + ": " + response.statusText,
            unescape('Contenido: ' + data)
          ],
          action: "Vea el Log del servidor!"
        });
      }
    }
    if (result.messages.length === 0) {
      result.messages.push({
        type: "error",
        description: "Error al invocar al servicio",
        causes: [
          "Servicio:  " + error.config.url,
          "Respuesta: " + (error.code || "999") + ": " + error.message
        ],
        action: "Vea el Log del servidor!"
      });
    }
    processMessage(result);
    callerError(result);
  });
}
]]></file>
    <file name="Model.tsx" layer="view:domain" dir="." skip="false" append="false"><![CDATA[
export interface FieldFilter {
   operator: string,
   value?: any
}
export interface FieldMessage {
   type: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';
   icon?: string;
   message: string;
}
export interface ResultMessage {
   type: string,
   description: string,
   action?: string,
   causes: Array<string>
}
export interface Result {
   error: boolean,
   messages: Array<ResultMessage>,
   value?: any | Array<any>,
}
export interface FilterAbstract {
   config?: {
      index?: number,
      size?: number,
      column?: string,
      sort?: 'asc' | 'desc' | 'none'
   }
}
]]></file>
    <file name="Validate.tsx" layer="view:domain" dir="." skip="false" append="false"><![CDATA[
import { InputTextState } from "ui-fast";

export const isRequired = function (name: string, inputValue: InputTextState): InputTextState {
  if (!inputValue.value) {
    inputValue.state = 'error';
    inputValue.message = 'Se requiere un valor';
  }
  return inputValue;
}

export const isEmail = function (name: string, inputValue: InputTextState): InputTextState {
  if (inputValue.value && !inputValue.value.includes('@')) {
    inputValue.state = 'error';
    inputValue.message = 'Correo invalido';
  }
  return inputValue;
}
]]></file>
    <file name="Convert.tsx" layer="view:domain" dir="." skip="false" append="false"><![CDATA[
export const toString = function (value: any): string {
  return '' + value;
}

export const toDateFormat = function (value: date|number): string {
  return '01/01/9999';
}

export const toMoneyFormat = function (value: number): string {
  return '12.456,56';
}
]]></file>
    <% 
    def entityRef = [:]
    mapper.entity.each { entityRef[it.id] = it }
    entityRef.each {
    id, entity ->
    def pkg    = fn.pkg(groupId, artifactId, module);  
    def data   = fn.deduceName(entity.clazz)
    def filter = fn.deduceName(entity.clazz, 'Filter')
    def message = fn.deduceName(entity.clazz, 'Message')
    def serv   = fn.deduceName(entity.clazz, 'Serv')
    def rest   = fn.deduceName(entity.clazz, 'Rest')
    def viewCtrl = fn.deduceName(entity.clazz, '-ctrl')
    def viewPart = fn.deduceName(entity.clazz, '-part')
    def viewServ = fn.deduceName(entity.clazz, '-serv')
    def attr   = []
    attr.addAll(entity.attributes.id.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.basic.collect{fn.deduceAttrName(it)})
    attr.addAll(entity.attributes.oneToMany.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.oneToOne.collect{fn.deduceRefName(it, entityRef)})
    attr.addAll(entity.attributes.manyToOne.collect{fn.deduceRefName(it, entityRef)})
    %>
    <file name="${data.type}Model.tsx" layer="view:domain" dir="${data.path}" skip="false"><![CDATA[
import { FieldFilter, FieldMessage, FilterAbstract } from "../Model";
import { InputTextValidate } from "ui-fast";

export interface ${data.type} {<% attr.each{  %>
   ${it.var}?: ${it.jsType},<% } %>
}

export interface ${filter.type} extends FilterAbstract {<% attr.each{  %>
   ${it.var}?: FieldFilter,<% } %>
}

export interface ${message.type} {<% attr.each{  %>
   ${it.var}?: string | FieldMessage,<% } %>
   [attr: string]: any
}

export interface ${data.type}Validate {<% attr.each{  %>
   ${it.var}?: Array<InputTextValidate>,<% } %>
   [attr: string]: any
}
]]></file>
    <file name="${rest.type}.tsx" layer="view:domain" dir="${data.path}" skip="false"><![CDATA[

import { endpoint, processCaller } from "../Endpoint";
import { ${data.type}, ${filter.type} } from "./${data.type}Model";
import axios from 'axios';

type fnSuccessArray = (values: ${data.type}[]) => void;
type fnSuccess = (value: ${data.type}) => void;
type fnError = (response: any) => void;

export const ${data.var}Ping = function (callback?: (response: any) => void) {
  let caller = axios.get(`\${endpoint}/${data.path}`);
  processCaller(caller, callback, callback);
}

export const ${data.var}Filter = function (payload: ${filter.type}, success?: fnSuccessArray, error?: fnError) {
  let caller = axios.post(`\${endpoint}/${data.path}/filtrar`, payload);
  processCaller(caller, success, error);
}

export const ${data.var}Reload = function (payload: ${data.type}, success?: fnSuccess, error?: fnError) {
  let caller = axios.post(`\${endpoint}/${data.path}/recargar`, payload);
  processCaller(caller, success, error);
}

export const ${data.var}Create = function (payload: ${data.type}, success?: fnSuccess, error?: fnError) {
  let caller = axios.post(`\${endpoint}/${data.path}/registrar`, payload);
  processCaller(caller, success, error);
}

export const ${data.var}Update = function (payload: ${data.type}, success?: fnSuccess, error?: fnError) {
  let caller = axios.post(`\${endpoint}/${data.path}/actualizar`, payload);
  processCaller(caller, success, error);
}

export const ${data.var}Remove = function (payload: ${data.type}, success?: fnSuccess, error?: fnError) {
  let caller = axios.post(`\${endpoint}/${data.path}/eliminar`, payload);
  processCaller(caller, success, error);
}
]]></file>
    <file name="${data.type}Form.tsx" layer="view:domain" dir="${data.path}/part"><![CDATA[
import React from "react";
import { Grid, InputText, InputTextChange, OutputText, Alert } from "ui-fast";
import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { toString } from "../../Convert";

export interface ${data.type}FormProps {
  value?: ${data.type},
  message?: ${data.type}Message,
  validate?: ${data.type}Validate,
  onValue?: InputTextChange
}

export const ${data.type}Form: React.SFC<${data.type}FormProps> = (props) => {
  let { value, onValue, message, validate } = props;
  message = message || {};
  validate = validate ? validate : {};
  return (
    value ?
      <Grid cols="4, 8"><% attr.each{  %>
        <OutputText name="${it.var}"
          value="${it.text}" />
        <InputText name="${it.var}"
          value={value.${it.var}} 
          onChange={onValue}
          message={message.${it.var}}
          onValidate={validate.${it.var}}
          onFormat={toString}
          onConvert={toString} />
        <% } %>
      </Grid>
      :
      <Alert variant="danger"
        message="Se requiere un objeto instanciado"
        icon="warning" />
  );
}
]]></file>
    <file name="${data.type}View.tsx" layer="view:domain" dir="${data.path}/part"><![CDATA[
import React from "react";
import { Grid, OutputText, Alert } from "ui-fast";
import { ${data.type} } from "../${data.type}Model";
import { toString } from "../../Convert";

export interface ${data.type}ViewProps {
  value?: ${data.type}
}

export const ${data.type}View: React.SFC<${data.type}ViewProps> = (props) => {
  let { value } = props;
  return (
    value ?
      <Grid cols="4, 8"><% attr.each{  %>
        <OutputText name="${it.var}"
          value="${it.text}" />
        <OutputText name="${it.var}"
          value={value.${it.var}}
          onFormat={toString} />
        <% } %>
      </Grid>
      :
      <Alert variant="danger"
        message="Se requiere un objeto instanciado"
        icon="warning" />
  );
}
]]></file>
    <file name="${data.type}Table.tsx" layer="view:domain" dir="${data.path}/part"><![CDATA[
import React from "react";
import { Table, Column, TableConfig } from "ui-fast";
import { ${data.type} } from "../${data.type}Model";
import { toString } from "../../Convert";

export interface ${data.type}Table {
  values: ${data.type}[],
  select?: ${data.type} | ${data.type}[],
  onSelect?: (e: ${data.type}) => void,
  config?: TableConfig,
  onConfig?: (e: TableConfig) => void
}

export const ${data.type}Table: React.SFC<${data.type}Table> = (props) => {
  let { values, select, config, onSelect, onConfig } = props;
  return (
    <Table pk="id" values={values} select={select} config={config} onSelect={onSelect} onConfig={onConfig}><% attr.each{  %>
      <Column title="${it.text}"
        attr="${it.var}"
        onFormat={toString}
        align="right" />
      <% } %>
    </Table>
  );
}
]]></file>
    <file name="${data.type}Query.tsx" layer="view:domain" dir="${data.path}/part"><![CDATA[
import React from "react";
import { Grid, FilterText, FilterTextChange } from "ui-fast";
import { ${data.type}Filter } from "../${data.type}Model";
import { toString } from "../../Convert";

export interface ${data.type}QueryProps {
  value: ${data.type}Filter,
  onChange: FilterTextChange
}

export const ${data.type}Query: React.SFC<${data.type}QueryProps> = (props) => {
  let { value, onChange } = props;
  return (
    <Grid cols="4, 8"><% attr.each{  %>
      <FilterText name="${it.var}"
        value={value.${it.var}}
        onChange={onChange}
        label="${it.text}"
        onConvert={toString}
        option="number" />
      <% } %>
    </Grid>
  );
}
]]></file>
    <file name="${data.type}Manager.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[

]]></file>
    <file name="${data.type}Inbox.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[import React from "react";

import { Panel, Action, Button } from "ui-fast";
import { FilterTextState, TableConfig } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.var}Filter } from "../${data.type}Rest";
import { ${data.type}, ${data.type}Filter } from "../${data.type}Model";
import { ${data.type}Table, ${data.type}Query } from "../${data.type}Part";

export interface ${data.type}InboxProps extends RouteComponentProps {
    hide?: boolean
}

interface ${data.type}InboxState {
    filter: ${data.type}Filter;
    values: Array<${data.type}>;
    select?: ${data.type};
}

class ${data.type}InboxLocal extends React.Component<${data.type}InboxProps, ${data.type}InboxState> {

    constructor(props: ${data.type}InboxProps) {
        super(props);
        this.state = {
            filter: {},
            values: [],
            select: undefined
        };
        this.onSelect = this.onSelect.bind(this);
        this.onFilter = this.onFilter.bind(this);
        this.onConfig = this.onConfig.bind(this);
        this.filterClick = this.filterClick.bind(this);
        this.filterClick("apply");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return null;
        }
        let { history } = this.props;
        let { onFilter, filterClick, onConfig, onSelect } = this;
        let { filter, values, select } = this.state;
        let id = select ? select.id : '#ID#';
        let config = Object.assign({}, filter.config);
        let disabled = !select;
        return (
            <Panel>
                <title>Listado de ${data.type}s</title>
                <${data.type}Query value={filter}
                    onChange={onFilter} />
                <Action>
                    <Button name="apply"
                        onClick={filterClick}
                        icon="filter"
                        variant="primary"
                        text="Buscar" />
                    <Button name="clean"
                        onClick={filterClick}
                        icon="eraser"
                        variant="secondary"
                        text="Limpiar" />
                    <Button name="open"
                        to="/${data.var}/create"
                        history={history}
                        icon="plus-circle"
                        variant="success"
                        text="Crear" />
                    <Button name="open"
                        to={"/${data.var}/update/" + id}
                        history={history}
                        icon="pencil"
                        disabled={disabled}
                        variant="primary"
                        text="Modificar" />
                    <Button name="open"
                        to={"/${data.var}/detail/" + id}
                        history={history}
                        icon="eye"
                        disabled={disabled}
                        variant="primary"
                        text="Detalle" />
                    <Button name="open"
                        to={"/${data.var}/remove/" + id}
                        history={history}
                        icon="trash"
                        disabled={disabled}
                        variant="danger"
                        text="Eliminar" />
                </Action>
                <${data.type}Table values={values}
                    select={select}
                    config={config}
                    onSelect={onSelect}
                    onConfig={onConfig} />
            </Panel>
        );
    }

    onFilter(state: FilterTextState) {
        let filter: any = Object.assign({}, this.state.filter);
        filter[state.name] = { operator: state.operator, value: state.value };
        this.setState({ filter });
    }

    onSelect(value: ${data.type}) {
        let select = this.state.select === value ? undefined : value;
        this.setState({ select });
    }

    onConfig(value: TableConfig) {
        let filter = { ...this.state.filter };
        let config = filter.config || {};
        filter.config = Object.assign(config, value);
        this.setState({ filter }, () => {
            this.filterClick("sort");
        });
    }

    filterClick(name: string) {
        let filter = { ...this.state.filter };
        if (name === "clean") {
            filter = { config: filter.config };
            this.setState({
                select: undefined,
                values: []
            });
        }
        ${data.var}Filter(filter, (values: Array<${data.type}>) => {
            this.setState({ values, filter });
        }, () => {
            this.setState({ values: [], filter });
        });
    }
}

export const ${data.type}Inbox = withRouter(${data.type}InboxLocal);
]]></file>
    <file name="${data.type}Create.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextState, InputTextValidate } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Create } from "../${data.type}Rest";
import { ${data.type}Form } from "../${data.type}Part";
import { isRequired } from "../../Validate";

export interface ${data.type}CreateProps extends RouteComponentProps {
    hide?: boolean,
}

interface ${data.type}CreateState {
    message: ${data.type}Message;
    ${data.var}: ${data.type};
}

class ${data.type}CreateLocal extends React.PureComponent<${data.type}CreateProps, ${data.type}CreateState> {

    private validate: ${data.type}Validate = {<% attr.each{  %>
        ${it.var}: [isRequired],
      <% } %>
    }

    constructor(props: ${data.type}CreateProps) {
        super(props);
        this.state = {
            message: {},
            ${data.var}: {}
        };
        this.onValue = this.onValue.bind(this);
        this.refuseMessage = this.refuseMessage.bind(this);
        this.createClick = this.createClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(state: InputTextState) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let message: any = Object.assign({}, this.state.message);
        ${data.var}[state.name] = state.value;
        message[state.name] = state.message;
        this.setState({ ${data.var}, message });
    }

    refuseMessage(): string {
        let { ${data.var}, message } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.var} no es valido!";
        }
        let other: any = ${data.var} || {};
        let attrs = Object.keys(validate);
        let states: InputTextState[] = attrs.map(attr => { return { name: attr, state: 'none', value: other[attr] } });
        states.map(state => {
            let fnVals: Array<InputTextValidate> = validate[state.name];
            if (fnVals) {
                fnVals.every(fnVal => {
                    state = fnVal(state)
                    return state.state === 'none';
                });
            }
            return state;
        }).filter(it => it && it.state !== 'none')
            .forEach(it => { message[it.name] = { message: it.message, type: it.state, icon: 'warning' } });
        if (Object.keys(message).filter(it => message[it]).length > 0) {
            this.setState({ message }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o más errores.";
        }
        return '';
    }

    createClick() {
        let value = this.state.${data.var} || {};
        ${data.var}Create(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var}, message } = this.state;
        let { createClick, cancelClick, refuseMessage, onValue, validate } = this;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Crear Nuevo ${data.type}</title>
                <${data.type}Form value={${data.var}} onValue={onValue} message={message} validate={validate} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={createClick}
                            text="Guardar"
                            icon="check-circle"
                            variant="primary"
                            refuse={refuseMessage}
                            confirm="Esta seguro de crear el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${data.type}Create = withRouter(${data.type}CreateLocal);

]]></file>
    <file name="${data.type}Update.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { InputTextState, InputTextValidate } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";
import { ${data.type}, ${data.type}Message, ${data.type}Validate } from "../${data.type}Model";
import { ${data.var}Reload, ${data.var}Update } from "../${data.type}Rest";
import { ${data.type}Form } from "../${data.type}Part";
import { isRequired } from "../../Validate";

export interface ${data.type}UpdateProps extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}
        
interface ${data.type}UpdateState {
    message: ${data.type}Message;
    ${data.var}?: ${data.type};
}

class ${data.type}UpdateLocal extends React.PureComponent<${data.type}UpdateProps, ${data.type}UpdateState> {

    private validate: ${data.type}Validate = {<% attr.each{  %>
        ${it.var}: [isRequired],
      <% } %>
    }

    constructor(props: ${data.type}UpdateProps) {
        super(props);
        this.state = {
            message: {},
            ${data.var}: undefined
        };
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.onValue = this.onValue.bind(this);
        this.refuseMessage = this.refuseMessage.bind(this);
        this.updateClick = this.updateClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    onValue(state: InputTextState) {
        let ${data.var}: any = Object.assign({}, this.state.${data.var});
        let message: any = Object.assign({}, this.state.message);
        ${data.var}[state.name] = state.value;
        message[state.name] = state.message;
        this.setState({ ${data.var}, message });
    }

    refuseMessage(): string {
        let { ${data.var}, message } = this.state;
        let { validate } = this;
        if (!${data.var}) {
            return "El ${data.text} no es valido!";
        }
        let other: any = ${data.var} || {};
        let attrs = Object.keys(validate);
        let states: InputTextState[] = attrs.map(attr => { return { name: attr, state: 'none', value: other[attr] } });
        states.map(state => {
            let fnVals: Array<InputTextValidate> = validate[state.name];
            if (fnVals) {
                fnVals.every(fnVal => {
                    state = fnVal(state)
                    return state.state === 'none';
                });
            }
            return state;
        }).filter(it => it && it.state !== 'none')
            .forEach(it => { message[it.name] = { message: it.message, type: it.state, icon: 'warning' } });
        if (Object.keys(message).filter(it => message[it]).length > 0) {
            this.setState({ message }, () => {
                this.forceUpdate();
            });
            return "El formulario contiene uno o más errores.";
        }
        return "";
    }

    updateClick() {
        let value = this.state.${data.var} || {};
        ${data.var}Update(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var}, message } = this.state;
        let { updateClick, cancelClick, refuseMessage, onValue, validate } = this;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Modificar ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}Form value={${data.var}}
                    onValue={onValue}
                    message={message}
                    validate={validate} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={updateClick}
                            text="Guardar"
                            icon="check-circle"
                            variant="primary"
                            refuse={refuseMessage}
                            confirm="Esta seguro de actualizar el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${data.type}Update = withRouter(${data.type}UpdateLocal);
]]></file>
    <file name="${data.type}Detail.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.type} } from "../${data.type}Model";
import { ${data.var}Reload } from "../${data.type}Rest";
import { ${data.type}View } from "../${data.type}Part";

export interface ${data.type}DetailProps extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}

interface ${data.type}DetailState {
    ${data.var}?: ${data.type};
}

class ${data.type}DetailLocal extends React.PureComponent<${data.type}DetailProps, ${data.type}DetailState> {
    constructor(props: ${data.type}DetailProps) {
        super(props);
        this.state = {};
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.cancelClick = this.cancelClick.bind(this);
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }

    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { cancelClick } = this;
        let { ${data.var} } = this.state;
        return (
            <Panel icon="pencil" variant="warning" width="50">
                <title>Detalle ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}View value={${data.var}} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${data.type}Detail = withRouter(${data.type}DetailLocal);

]]></file>
    <file name="${data.type}Remove.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
import React from "react";
import { Panel, Action, Button } from "ui-fast";
import { withRouter, RouteComponentProps } from "react-router-dom";

import { ${data.type} } from "../${data.type}Model";
import { ${data.var}Reload, ${data.var}Remove } from "../${data.type}Rest";
import { ${data.type}View } from "../${data.type}Part";

export interface ${data.type}RemoveProps extends RouteComponentProps<{ id${data.type}: string }> {
    hide?: boolean
}

interface ${data.type}RemoveState {
    ${data.var}?: ${data.type};
}

class ${data.type}RemoveLocal extends React.PureComponent<${data.type}RemoveProps, ${data.type}RemoveState> {

    constructor(props: ${data.type}RemoveProps) {
        super(props);
        this.state = {};
        let { id${data.type} } = this.props.match.params;
        ${data.var}Reload({ id: id${data.type} }, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var} });
        })
        this.removeClick = this.removeClick.bind(this);
        this.cancelClick = this.cancelClick.bind(this);
    }

    removeClick() {
        let value = this.state.${data.var} || {};
        ${data.var}Remove(value, (${data.var}: ${data.type}) => {
            this.setState({ ${data.var}: ${data.var} });
            this.cancelClick();
        });
    }

    cancelClick() {
        this.props.history.push("/${data.var}/inbox");
    }


    render(): React.ReactNode {
        if (this.props.hide === true) {
            return false;
        }
        let { ${data.var} } = this.state;
        let { cancelClick, removeClick } = this;
        return (
            <Panel icon="pencil"
                variant="warning"
                width="50">
                <title>Eliminacion ${data.type} #{${data.var} ? ${data.var}.id : "?"}</title>
                <${data.type}View value={${data.var}} />
                <footer>
                    <Action>
                        <Button name="apply"
                            onClick={cancelClick}
                            text="Cancelar"
                            icon="arrow-circle-left"
                            variant="warning" />
                        <Button name="apply"
                            onClick={removeClick}
                            text="Eliminar"
                            icon="check-circle"
                            variant="danger"
                            confirm="Esta seguro de eliminar el registro?"
                            hide={!${data.var}} />
                    </Action>
                </footer>
            </Panel>
        );
    };
};

export const ${data.type}Remove = withRouter(${data.type}RemoveLocal);

]]></file>
    <file name="${data.type}Search.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
//ejemplo 1
]]></file>
    <file name="${data.type}Proc01.tsx" layer="view:domain" dir="${data.path}/page"><![CDATA[
//ejemplo 1
]]></file>
    <file name="${data.type}Part.tsx" layer="view:domain" dir="${data.path}"><![CDATA[
export * from "./part/${data.type}Table";
export * from "./part/${data.type}Query";
export * from "./part/${data.type}Form";
export * from "./part/${data.type}View";
]]></file>
    <file name="${data.type}Page.tsx" layer="view:domain" dir="${data.path}"><![CDATA[

import React from "react";
import { Panel, Button } from "ui-fast";
import { Route, Switch } from "react-router-dom";
import { ${data.type}Inbox } from "./page/${data.type}Inbox";
import { ${data.type}Create } from "./page/${data.type}Create";
import { ${data.type}Update } from "./page/${data.type}Update";
import { ${data.type}Detail } from "./page/${data.type}Detail";
import { ${data.type}Remove } from "./page/${data.type}Remove";
import { ${data.var}Ping } from "./${rest.type}";

export const ${data.type}Manager: React.SFC = () => {

    let pingClick = function (name: string) {
        ${data.var}Ping();
    }

    return (
        <Panel>
            <header>
                <Button name="apply"
                    onClick={pingClick}
                    icon="bell"
                    variant="primary"
                    mode="link" />
                Administracion de ${data.type}(s)
            </header>
            <Switch>
                <Route path="/${data.var}/create" component={${data.type}Create} />
                <Route path="/${data.var}/update/:id${data.type}" component={${data.type}Update} />
                <Route path="/${data.var}/detail/:id${data.type}" component={${data.type}Detail} />
                <Route path="/${data.var}/remove/:id${data.type}" component={${data.type}Remove} />
                <Route path="/${data.var}/inbox/:id${data.type}" component={${data.type}Inbox} />
                <Route path="/${data.var}" component={${data.type}Inbox} />
            </Switch>
        </Panel>
    );
}
export {
    ${data.type}Inbox,
    ${data.type}Create,
    ${data.type}Update,
    ${data.type}Detail,
    ${data.type}Remove
};

]]></file>
    <% } %>
</files>
